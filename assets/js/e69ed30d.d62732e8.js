"use strict";(self.webpackChunkmachinat_github_io=self.webpackChunkmachinat_github_io||[]).push([[5955],{3905:function(n,e,t){t.d(e,{Zo:function(){return u},kt:function(){return m}});var o=t(7294);function a(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function r(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);e&&(o=o.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,o)}return t}function l(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?r(Object(t),!0).forEach((function(e){a(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function i(n,e){if(null==n)return{};var t,o,a=function(n,e){if(null==n)return{};var t,o,a={},r=Object.keys(n);for(o=0;o<r.length;o++)t=r[o],e.indexOf(t)>=0||(a[t]=n[t]);return a}(n,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);for(o=0;o<r.length;o++)t=r[o],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(a[t]=n[t])}return a}var s=o.createContext({}),p=function(n){var e=o.useContext(s),t=e;return n&&(t="function"==typeof n?n(e):l(l({},e),n)),t},u=function(n){var e=p(n.components);return o.createElement(s.Provider,{value:e},n.children)},d={inlineCode:"code",wrapper:function(n){var e=n.children;return o.createElement(o.Fragment,{},e)}},c=o.forwardRef((function(n,e){var t=n.components,a=n.mdxType,r=n.originalType,s=n.parentName,u=i(n,["components","mdxType","originalType","parentName"]),c=p(t),m=a,h=c["".concat(s,".").concat(m)]||c[m]||d[m]||r;return t?o.createElement(h,l(l({ref:e},u),{},{components:t})):o.createElement(h,l({ref:e},u))}));function m(n,e){var t=arguments,a=e&&e.mdxType;if("string"==typeof n||a){var r=t.length,l=new Array(r);l[0]=c;var i={};for(var s in e)hasOwnProperty.call(e,s)&&(i[s]=e[s]);i.originalType=n,i.mdxType="string"==typeof n?n:a,l[1]=i;for(var p=2;p<r;p++)l[p]=t[p];return o.createElement.apply(null,l)}return o.createElement.apply(null,t)}c.displayName="MDXCreateElement"},5162:function(n,e,t){t.d(e,{Z:function(){return l}});var o=t(7294),a=t(6010),r="tabItem_Ymn6";function l(n){var e=n.children,t=n.hidden,l=n.className;return o.createElement("div",{role:"tabpanel",className:(0,a.Z)(r,l),hidden:t},e)}},5488:function(n,e,t){t.d(e,{Z:function(){return m}});var o=t(7462),a=t(7294),r=t(6010),l=t(2389),i=t(7392),s=t(7094),p=t(2466),u="tabList__CuJ",d="tabItem_LNqP";function c(n){var e,t,l=n.lazy,c=n.block,m=n.defaultValue,h=n.values,g=n.groupId,f=n.className,b=a.Children.map(n.children,(function(n){if((0,a.isValidElement)(n)&&"value"in n.props)return n;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof n.type?n.type:n.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),k=null!=h?h:b.map((function(n){var e=n.props;return{value:e.value,label:e.label,attributes:e.attributes}})),T=(0,i.l)(k,(function(n,e){return n.value===e.value}));if(T.length>0)throw new Error('Docusaurus error: Duplicate values "'+T.map((function(n){return n.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var y=null===m?m:null!=(e=null!=m?m:null==(t=b.find((function(n){return n.props.default})))?void 0:t.props.value)?e:b[0].props.value;if(null!==y&&!k.some((function(n){return n.value===y})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+y+'" but none of its children has the corresponding value. Available values are: '+k.map((function(n){return n.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var v=(0,s.U)(),N=v.tabGroupChoices,x=v.setTabGroupChoices,w=(0,a.useState)(y),C=w[0],L=w[1],M=[],I=(0,p.o5)().blockElementScrollPositionUntilNextRender;if(null!=g){var O=N[g];null!=O&&O!==C&&k.some((function(n){return n.value===O}))&&L(O)}var P=function(n){var e=n.currentTarget,t=M.indexOf(e),o=k[t].value;o!==C&&(I(e),L(o),null!=g&&x(g,String(o)))},D=function(n){var e,t=null;switch(n.key){case"ArrowRight":var o,a=M.indexOf(n.currentTarget)+1;t=null!=(o=M[a])?o:M[0];break;case"ArrowLeft":var r,l=M.indexOf(n.currentTarget)-1;t=null!=(r=M[l])?r:M[M.length-1]}null==(e=t)||e.focus()};return a.createElement("div",{className:(0,r.Z)("tabs-container",u)},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":c},f)},k.map((function(n){var e=n.value,t=n.label,l=n.attributes;return a.createElement("li",(0,o.Z)({role:"tab",tabIndex:C===e?0:-1,"aria-selected":C===e,key:e,ref:function(n){return M.push(n)},onKeyDown:D,onFocus:P,onClick:P},l,{className:(0,r.Z)("tabs__item",d,null==l?void 0:l.className,{"tabs__item--active":C===e})}),null!=t?t:e)}))),l?(0,a.cloneElement)(b.filter((function(n){return n.props.value===C}))[0],{className:"margin-top--md"}):a.createElement("div",{className:"margin-top--md"},b.map((function(n,e){return(0,a.cloneElement)(n,{key:e,hidden:n.props.value!==C})}))))}function m(n){var e=(0,l.Z)();return a.createElement(c,(0,o.Z)({key:String(e)},n))}},3973:function(n,e,t){t.r(e),t.d(e,{assets:function(){return c},contentTitle:function(){return u},default:function(){return g},frontMatter:function(){return p},metadata:function(){return d},toc:function(){return m}});var o=t(7462),a=t(3366),r=(t(7294),t(3905)),l=t(5488),i=t(5162),s=["components"],p={title:"UI Component"},u=void 0,d={unversionedId:"learn/component",id:"learn/component",title:"UI Component",description:"While the app grows, we might want to reuse the UI to keep the codes DRY.",source:"@site/docs/learn/component.mdx",sourceDirName:"learn",slug:"/learn/component",permalink:"/docs/learn/component",draft:!1,editUrl:"https://github.com/machinat/machinat/edit/master/website/docs/learn/component.mdx",tags:[],version:"current",frontMatter:{title:"UI Component"},sidebar:"docs",previous:{title:"Native UI and Postback",permalink:"/docs/learn/native-ui-and-postback"},next:{title:"Service and State",permalink:"/docs/learn/service-and-state"}},c={},m=[{value:"Building Component",id:"building-component",level:2},{value:"The Component Function",id:"the-component-function",level:3},{value:"Insert an Array",id:"insert-an-array",level:3},{value:"Cross-Platform Component",id:"cross-platform-component",level:3},{value:"The Children Prop",id:"the-children-prop",level:2}],h={toc:m};function g(n){var e=n.components,p=(0,a.Z)(n,s);return(0,r.kt)("wrapper",(0,o.Z)({},h,p,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"While the app grows, we might want to reuse the UI to keep the codes ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Don%27t_repeat_yourself"},"DRY"),".\nIn this lesson, we'll go deeper to make reusable chat UI components."),(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("em",{parentName:"p"},"Time to accomplish: 15 minutes"))),(0,r.kt)("h2",{id:"building-component"},"Building Component"),(0,r.kt)("p",null,"Let's continue creating the todos list UI.\nBut this time, we'll build it in a customized ",(0,r.kt)("strong",{parentName:"p"},"JSX Component"),"."),(0,r.kt)("p",null,"First add this type that represent the todo data:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/types.ts"',title:'"src/types.ts"'},"//...\nexport type Todo = {\n  id: number;\n  name: string;\n};\n")),(0,r.kt)("p",null,"Then create a ",(0,r.kt)("inlineCode",{parentName:"p"},"src/components/TodoList.tsx")," file with the following content:"),(0,r.kt)(l.Z,{groupId:"chat-platforms",defaultValue:"messenger",values:[{label:"Messenger",value:"messenger"},{label:"Telegram",value:"telegram"},{label:"LINE",value:"line"}],mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"messenger",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/components/TodoList.tsx"',title:'"src/components/TodoList.tsx"'},"import Machinat from '@machinat/core';\nimport * as Messenger from '@machinat/messenger/components';\nimport { Todo } from '../types';\n\ntype TodoListProps = {\n  todos: Todo[];\n};\n\nconst TodoList = ({ todos }: TodoListProps, { platform }) => {\n  if (todos.length === 0) {\n    return <p>You have no todo now.</p>;\n  }\n\n  const summary = <p>You have <b>{todos.length}</b> todos:</p>;\n  const finishLabel = 'Done \u2713';\n\n  if (platform === 'messenger') {\n    return (\n      <>\n        {summary}\n        <Messenger.GenericTemplate>\n          {todos.slice(0, 10).map((todo) => (\n            <Messenger.GenericItem\n              title={todo.name}\n              buttons={\n                <Messenger.PostbackButton\n                  title={finishLabel}\n                  payload={JSON.stringify({ action: 'finish', id: todo.id })}\n                />\n              }\n            />\n          ))}\n        </Messenger.GenericTemplate>\n      </>\n    );\n  }\n\n  return (\n    <>\n      {summary}\n      {todos.map((todo) => <p>{todo.name}</p>)}\n    </>\n  );\n};\n\nexport default TodoList;\n"))),(0,r.kt)(i.Z,{value:"telegram",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/components/TodoList.tsx"',title:'"src/components/TodoList.tsx"'},"import Machinat from '@machinat/core';\nimport * as Telegram from '@machinat/telegram/components';\nimport { Todo } from '../types';\n\ntype TodoListProps = {\n  todos: Todo[];\n};\n\nconst TodoList = ({ todos }: TodoListProps, { platform }) => {\n  if (todos.length === 0) {\n    return <p>You have no todo now.</p>;\n  }\n\n  const summary = <p>You have <b>{todos.length}</b> todos:</p>;\n  const finishLabel = 'Done \u2713';\n\n  if (platform === 'telegram') {\n    return (\n      <>\n        {summary}\n        {todos.slice(0, 10).map((todo) => (\n          <Telegram.Text\n            replyMarkup={\n              <Telegram.InlineKeyboard>\n                <Telegram.CallbackButton\n                  text={finishLabel}\n                  data={JSON.stringify({ action: 'finish', id: todo.id })}\n                />\n              </Telegram.InlineKeyboard>\n            }\n          >\n            {todo.name}\n          </Telegram.Text>\n        ))}\n      </>\n    );\n  }\n\n  return (\n    <>\n      {summary}\n      {todos.map((todo) => <p>{todo.name}</p>)}\n    </>\n  );\n};\n\nexport default TodoList;\n"))),(0,r.kt)(i.Z,{value:"line",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/components/TodoList.tsx"',title:'"src/components/TodoList.tsx"'},"import Machinat from '@machinat/core';\nimport * as Line from '@machinat/line/components';\nimport { Todo } from '../types';\n\ntype TodoListProps = {\n  todos: Todo[];\n};\n\nconst TodoList = ({ todos }: TodoListProps, { platform }) => {\n  if (todos.length === 0) {\n    return <p>You have no todo now.</p>;\n  }\n\n  const summary = <p>You have <b>{todos.length}</b> todos:</p>;\n  const finishLabel = 'Done \u2713';\n\n  if (platform === 'line') {\n    return (\n      <>\n        {summary}\n        <Line.CarouselTemplate\n          altText={todos.map((todo) => todo.name).join('\\n')}\n        >\n          {todos.slice(0, 10).map((todo) => (\n            <Line.CarouselItem\n              actions={\n                <Line.PostbackAction\n                  label={finishLabel}\n                  data={JSON.stringify({ action: 'finish', id: todo.id })}\n                />\n              }\n            >\n              {todo.name}\n            </Line.CarouselItem>\n          ))}\n        </Line.CarouselTemplate>\n      </>\n    );\n  }\n\n  return (\n    <>\n      {summary}\n      {todos.map((todo) => <p>{todo.name}</p>)}\n    </>\n  );\n};\n\nexport default TodoList;\n")))),(0,r.kt)("p",null,"The component can then be used in the ",(0,r.kt)("inlineCode",{parentName:"p"},"handleChat")," like:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'{1,5-11} title="src/handlers/handleChat.tsx"',"{1,5-11}":!0,title:'"src/handlers/handleChat.tsx"'},"import TodoList from '../components/TodoList';\n// ...\n  if (action.type === 'list') {\n    return reply(\n      <TodoList\n        todos={[\n          { id: 1, name: 'Buy a mask' },\n          { id: 2, name: 'Wear it on' },\n          { id: 3, name: 'Be safe' },\n        ]}\n      />\n    );\n  }\n// ...\n")),(0,r.kt)("p",null,"Now tap the ",(0,r.kt)("inlineCode",{parentName:"p"},"Show Todos \ud83d\udcd1")," button again, the bot should reply like:"),(0,r.kt)("img",{width:400,src:t(3943).Z}),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Done \u2713")," button post back a ",(0,r.kt)("inlineCode",{parentName:"p"},"'finish'")," action with the todo id, we will\nhandle that at the next lesson.")),(0,r.kt)("h3",{id:"the-component-function"},"The Component Function"),(0,r.kt)("p",null,"A ",(0,r.kt)("strong",{parentName:"p"},"component")," is a function with ",(0,r.kt)("strong",{parentName:"p"},"capitalized")," name.\nWe can use it as the JSX element tag like:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"<TodoList todos={[{ id: 1, name: 'foo' }, /* ... */]} />\n")),(0,r.kt)("p",null,"The first param is the ",(0,r.kt)("strong",{parentName:"p"},"props")," of the JSX element.\n",(0,r.kt)("inlineCode",{parentName:"p"},"TodoList")," function receives a ",(0,r.kt)("inlineCode",{parentName:"p"},"{ todos: [/* ... */] }")," object.\nThen we can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"todos")," to return the UI:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"  return (\n    <>\n      {summary}\n      {todos.map((todo) => <p>{todo.name}</p>)}\n    </>\n  );\n")),(0,r.kt)("h3",{id:"insert-an-array"},"Insert an Array"),(0,r.kt)("p",null,"To display the todos list, we can insert an array of elements in JSX.\nThe ",(0,r.kt)("inlineCode",{parentName:"p"},"{todos.map(todo => <p>{todo.name}</p>)}")," code above actually\nshows the same result as:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"<>\n  <p>{todo[1].name}</p>\n  <p>{todo[2].name}</p>\n  <p>{todo[3].name}</p>\n</>\n")),(0,r.kt)("h3",{id:"cross-platform-component"},"Cross-Platform Component"),(0,r.kt)("p",null,"To customize messages for the platform,\nwe can return the UI according to ",(0,r.kt)("inlineCode",{parentName:"p"},"platform")," at the second param.\nLike:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"const TodoList = ({ todos }: TodoListProps, { platform }) => {\n  // ...\n  if (platform === 'messenger') {\n    return (\n      // messenger UI element\n    );\n  }\n  // ...\n")),(0,r.kt)("p",null,"At the end of the function, we can return a general UI as the default message:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"  // ...\n  return (\n    <>\n      {summary}\n      {todos.map((todo) => <p>{todo.name}</p>)}\n    </>\n  );\n};\n")),(0,r.kt)("p",null,"With this strategy, we can make a component that works on all the platforms."),(0,r.kt)("h2",{id:"the-children-prop"},"The Children Prop"),(0,r.kt)("p",null,"Another common strategy is wrapping around the children of the element.\nLet's use it to make a menu component."),(0,r.kt)("p",null,"Edit ",(0,r.kt)("inlineCode",{parentName:"p"},"src/components/WithMenu.tsx")," component like this:"),(0,r.kt)(l.Z,{groupId:"chat-platforms",defaultValue:"messenger",values:[{label:"Messenger",value:"messenger"},{label:"Telegram",value:"telegram"},{label:"LINE",value:"line"}],mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"messenger",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'tsx title="src/components/WithMenu.tsx"',tsx:!0,title:'"src/components/WithMenu.tsx"'},"//...\ntype WithMenuProps = {\n  children: MachinatNode;\n  // highlight-next-line\n  todoCount: number;\n};\n\n// highlight-start\nconst WithMenu = ({ children, todoCount }: WithMenuProps, { platform }) => {\n  const info = <>You have <b>{todoCount}</b> todos now.</>;\n  const listLabel = 'Show Todos \ud83d\udcd1';\n  const listData = JSON.stringify({ action: 'list' });\n  const addLabel = 'New Todo \u2795';\n  const addData = JSON.stringify({ action: 'add' });\n  // highlight-end\n\n  if (platform === 'messenger') {\n    return (\n      // highlight-start\n      <>\n        {children}\n        <Messenger.ButtonTemplate\n          buttons={\n            <>\n              <Messenger.PostbackButton\n                title={listLabel}\n                payload={listData}\n              />\n              <Messenger.PostbackButton\n                title={addLabel}\n                payload={addData}\n              />\n            </>\n          }\n        >\n          {info}\n        </Messenger.ButtonTemplate>\n      </>\n      // highlight-end\n    );\n  }\n\n  // highlight-start\n  return (\n    <>\n      {children}\n      <p>{info}</p>\n    </>\n  );\n  // highlight-end\n};\n//...\n"))),(0,r.kt)(i.Z,{value:"telegram",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/components/WithMenu.tsx"',title:'"src/components/WithMenu.tsx"'},"//...\ntype WithMenuProps = {\n  children: MachinatNode;\n  // highlight-next-line\n  todoCount: number;\n};\n\n// highlight-start\nconst WithMenu = ({ children, todoCount }: WithMenuProps, { platform }) => {\n  const info = <>You have <b>{todoCount}</b> todos now.</>;\n  const listLabel = 'Show Todos \ud83d\udcd1';\n  const listData = JSON.stringify({ action: 'list' });\n  const addLabel = 'New Todo \u2795';\n  const addData = JSON.stringify({ action: 'add' });\n  // highlight-end\n\n  if (platform === 'telegram') {\n    return (\n      // highlight-start\n      <>\n        {children}\n        <Telegram.Text\n          replyMarkup={\n            <Telegram.InlineKeyboard>\n              <Telegram.CallbackButton\n                text={listLabel}\n                data={listData}\n              />\n              <Telegram.CallbackButton\n                text={addLabel}\n                data={addData}\n              />\n            </Telegram.InlineKeyboard>\n          }\n        >\n          {info}\n        </Telegram.Text>\n      </>\n      // highlight-end\n    );\n  }\n\n  // highlight-start\n  return (\n    <>\n      {children}\n      <p>{info}</p>\n    </>\n  );\n  // highlight-end\n};\n//...\n"))),(0,r.kt)(i.Z,{value:"line",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/components/WithMenu.tsx"',title:'"src/components/WithMenu.tsx"'},"//...\ntype WithMenuProps = {\n  children: MachinatNode;\n  // highlight-next-line\n  todoCount: number;\n};\n\n// highlight-start\nconst WithMenu = ({ children, todoCount }: WithMenuProps, { platform }) => {\n  const info = <>You have <b>{todoCount}</b> todos now.</>;\n  const listLabel = 'Show Todos \ud83d\udcd1';\n  const listData = JSON.stringify({ action: 'list' });\n  const addLabel = 'New Todo \u2795';\n  const addData = JSON.stringify({ action: 'add' });\n  // highlight-end\n\n  if (platform === 'line') {\n    return (\n      // highlight-start\n      <>\n        {children}\n        <Line.ButtonTemplate\n          altText={`You have ${todoCount} todos now.`}\n          actions={\n            <>\n              <Line.PostbackAction\n                label={listLabel}\n                displayText={listLabel}\n                data={listData}\n              />\n              <Line.PostbackAction\n                label={addLabel}\n                displayText={addLabel}\n                data={addData}\n              />\n            </>\n          }\n        >\n          {info}\n        </Line.ButtonTemplate>\n      </>\n      // highlight-end\n    );\n  }\n\n  // highlight-start\n  return (\n    <>\n      {children}\n      <p>{info}<p/>\n    </>\n  );\n  // highlight-end\n};\n//...\n")))),(0,r.kt)("p",null,"Then we can use it in ",(0,r.kt)("inlineCode",{parentName:"p"},"handleChat")," like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'{9-11,17-19} title="src/handlers/handleChat.tsx"',"{9-11,17-19}":!0,title:'"src/handlers/handleChat.tsx"'},"import WithMenu from '../components/WithMenu';\n//...\n    if (event.type === 'text') {\n      const matchingAddTodo = event.text.match(/add(\\s+todo)?(.*)/i);\n\n      if (matchingAddTodo) {\n        const todoName = matchingAddTodo[2].trim();\n        return reply(\n          <WithMenu todoCount={3}>\n            <p>Todo \"<b>{todoName}</b>\" is added!</p>\n          </WithMenu>\n        );\n      }\n    }\n\n    return reply(\n      <WithMenu todoCount={3}>\n        <p>Hello! I'm a Todo Bot \ud83e\udd16</p>\n      </WithMenu>\n    );\n  };\n//...\n")),(0,r.kt)("p",null,"Now the menu should be attached like this:"),(0,r.kt)("img",{width:400,src:t(3605).Z}),(0,r.kt)("p",null,"In the codes above, we pass messages to the ",(0,r.kt)("inlineCode",{parentName:"p"},"WithMenu")," component like:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"<WithMenu todoCount={3}>\n  <p>Hello! I'm a Todo Bot \ud83e\udd16</p>\n</WithMenu>\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"<p>Hello! I'm a Todo Bot \ud83e\udd16</p>")," is then available as ",(0,r.kt)("inlineCode",{parentName:"p"},"children"),"\nprop in component function. We can simply return it with the menu attached\nbelow. Like:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"  return (\n    <>\n      {children}\n      <Messenger.ButtonTemplate\n        buttons={<>...</>}\n      >\n        {info}\n      </Messenger.ButtonTemplate>\n    </>\n  );\n")),(0,r.kt)("p",null,"You can use this strategy to elegantly decorate the messages,\nlike attaching a greeting, a menu or a feedback survey."),(0,r.kt)("hr",null),(0,r.kt)("p",null,"Now we know how to build complicated, cross-platform and reusable chat UI in ",(0,r.kt)("strong",{parentName:"p"},"components"),".\nNext, we'll display these UI with real data."))}g.isMDXComponent=!0},3605:function(n,e,t){e.Z=t.p+"assets/images/hello-with-menu-b8ed9a4d7d5c332f08a292716b16edda.png"},3943:function(n,e,t){e.Z=t.p+"assets/images/list-todo-2-d04d98a1cdd5d15ae83ac43a130233e8.gif"}}]);