"use strict";(self.webpackChunkmachinat_github_io=self.webpackChunkmachinat_github_io||[]).push([[290],{3905:function(e,n,t){t.d(n,{Zo:function(){return m},kt:function(){return g}});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=a.createContext({}),l=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},m=function(e){var n=l(e.components);return a.createElement(p.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,s=e.originalType,p=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),u=l(t),g=r,d=u["".concat(p,".").concat(g)]||u[g]||c[g]||s;return t?a.createElement(d,o(o({ref:n},m),{},{components:t})):a.createElement(d,o({ref:n},m))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var s=t.length,o=new Array(s);o[0]=u;var i={};for(var p in n)hasOwnProperty.call(n,p)&&(i[p]=n[p]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var l=2;l<s;l++)o[l]=t[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},3822:function(e,n,t){t.r(n),t.d(n,{assets:function(){return m},contentTitle:function(){return p},default:function(){return g},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return c}});var a=t(7462),r=t(3366),s=(t(7294),t(3905)),o=["components"],i={title:"Messenger Platform",sidebar_label:"Messenger"},p=void 0,l={unversionedId:"messenger-platform",id:"messenger-platform",title:"Messenger Platform",description:"@machinat/messenger platform enable your app to receive/send messages on Messenger platform",source:"@site/docs/messenger-platform.md",sourceDirName:".",slug:"/messenger-platform",permalink:"/docs/messenger-platform",draft:!1,editUrl:"https://github.com/machinat/machinat/edit/master/website/docs/messenger-platform.md",tags:[],version:"current",frontMatter:{title:"Messenger Platform",sidebar_label:"Messenger"},sidebar:"docs",previous:{title:"Reactive Programming",permalink:"/docs/reactive-programming"},next:{title:"Telegram",permalink:"/docs/telegram-platform"}},m={},c=[{value:"Install",id:"install",level:2},{value:"Setup",id:"setup",level:2},{value:"Usage",id:"usage",level:2},{value:"Webview",id:"webview",level:2},{value:"Auth Setup",id:"auth-setup",level:3},{value:"Open the Webview",id:"open-the-webview",level:3},{value:"Assets Manager",id:"assets-manager",level:2},{value:"Resources",id:"resources",level:2}],u={toc:c};function g(e){var n=e.components,t=(0,r.Z)(e,o);return(0,s.kt)("wrapper",(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"@machinat/messenger")," platform enable your app to receive/send messages on ",(0,s.kt)("a",{parentName:"p",href:"https://developers.facebook.com/docs/messenger-platform/"},"Messenger platform"),"\nas a Facebook page."),(0,s.kt)("h2",{id:"install"},"Install"),(0,s.kt)("p",null,"Install the ",(0,s.kt)("inlineCode",{parentName:"p"},"core"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"http")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"messenger")," packages:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"npm install @machinat/core @machinat/http @machinat/messenger\n")),(0,s.kt)("h2",{id:"setup"},"Setup"),(0,s.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"You can check ",(0,s.kt)("a",{parentName:"p",href:"https://machinat.com/docs/learn/create-app#platform-setup?p=messenger"},"setup section in the tutorial"),".\nIt brings you to set up everything step by step."))),(0,s.kt)("p",null,"First you need to apply a Facebook app and set up the page binding.\nFollow the ",(0,s.kt)("a",{parentName:"p",href:"https://developers.facebook.com/docs/messenger-platform/getting-started/app-setup"},"official guide"),"\nfor the setup procedures."),(0,s.kt)("p",null,"Then set up the ",(0,s.kt)("inlineCode",{parentName:"p"},"http")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"messenger")," modules like this:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"import Machinat from '@machinat/core';\nimport Http from '@machinat/http';\nimport Messenger from '@machinat/messenger';\n\nconst {\n  MESSENGER_PAGE_ID,\n  MESSENGER_APP_ID,\n  MESSENGER_ACCESS_TOKEN,\n  MESSENGER_APP_SECRET,\n  MESSENGER_VERIFY_TOKEN,\n} = process.env;\n\nconst app = Machinat.createApp({\n  modules: [\n    Http.initModule({ port: 8080 }),\n  ],\n  platforms: [\n    Messenger.intiModule({\n      entryPath: '/webhook/messenger',     // webhook path\n      pageId: MESSENGER_PAGE_ID,           // Facebook page id\n      appSecret: MESSENGER_APP_SECRET,     // Facebook app secret\n      accessToken: MESSENGER_ACCESS_TOKEN, // page access token\n      verifyToken: MESSENGER_VERIFY_TOKEN, // token for webhook verification\n    }),\n  ],\n});\n")),(0,s.kt)("h2",{id:"usage"},"Usage"),(0,s.kt)("p",null,"Here's an example to receive events and send replies back:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-tsx"},'import Machinat from \'@machinat/core\';\nimport * as Messenger from \'@machinat/messenger/components\';\nimport app from \'./app\';\n\napp.onEvent(async ({ platform, event, reply }) => {\n  if (platform === \'messenger\' && event.type === \'text\') {\n    await reply(\n      <Messenger.Expression\n        notificationType="SILENT_PUSH"\n        personaId="BOT_PERSONA_ID"\n        quickReplies={\n          <Messenger.TextReply title="I want \ud83d\udc36" payload="doggo" />\n        }\n      >\n        Hello Messenger! \ud83d\udc4b\n        <Messenger.GenericTemplate>\n          <Messenger.GenericItem\n            title="You daily \ud83d\udc31"\n            imageUrl="https://cataas.com/cat"\n            buttons={\n              <Messenger.PostbackButton title="More" payload="catto" />\n            }\n          />\n        </Messenger.GenericTemplate>\n      </Messenger.Expression>\n    );\n  }\n});\n')),(0,s.kt)("p",null,"Check API references for the details of ",(0,s.kt)("a",{parentName:"p",href:"https://machinat.com/api/modules/messenger#messengerevent"},"events"),"\nand ",(0,s.kt)("a",{parentName:"p",href:"https://machinat.com/api/modules/messenger_components"},"components"),"."),(0,s.kt)("h2",{id:"webview"},"Webview"),(0,s.kt)("h3",{id:"auth-setup"},"Auth Setup"),(0,s.kt)("p",null,"To use ",(0,s.kt)("a",{parentName:"p",href:"./embedded-webview"},"webviews")," in Messenger,\nconfigure the app with these steps:"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"Add auth provider to the ",(0,s.kt)("inlineCode",{parentName:"li"},"webview")," platform and set app info at the ",(0,s.kt)("inlineCode",{parentName:"li"},"basicAuth"),".\nAnd make sure you have a state provider installed.\nLike this:")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"import Webview from '@machinat/webview';\nimport RedisState from '@machiniat/redis';\nimport MessengerAuth from '@machinat/messenger/webview';\n\nconst app = Machinat.createApp({\n  platforms: [\n    Webview.initModule({\n      authPlatforms:[\n        MessengerAuth\n      ],\n      basicAuth: {\n        appName: 'My Foo App',\n        appIconUrl: './webview/img/logo.png'\n      },\n      // ...\n    }),\n  ],\n  modules: [\n    RedisState.initModule({\n      clientOptions: {\n        url: REDIS_URL,\n      },\n    }),\n  ],\n});\n")),(0,s.kt)("ol",{start:2},(0,s.kt)("li",{parentName:"ol"},"Expose your Facebook page id in ",(0,s.kt)("inlineCode",{parentName:"li"},"next.config.js"),":")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const { MESSENGER_PAGE_ID } = process.env;\n\nmodule.exports = {\n  publicRuntimeConfig: {\n    // highlight-next-line\n    MESSENGER_PAGE_ID,\n  },\n  // ...\n};\n")),(0,s.kt)("ol",{start:3},(0,s.kt)("li",{parentName:"ol"},"Set up the ",(0,s.kt)("inlineCode",{parentName:"li"},"WebviewClient")," in the webview:")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"import getConfig from 'next/config';\nimport WebviewClient from '@machinat/webview/client';\nimport MessengerAuth from '@machinat/messenger/webview/client';\n\nconst {\n  publicRuntimeConfig: { MESSENGER_PAGE_ID },\n} = getConfig();\n\nconst client =  new WebviewClient({\n  authPlatforms: [\n    new MessengerAuth({ pageId: MESSENGER_PAGE_ID }),\n  ],\n});\n")),(0,s.kt)("h3",{id:"open-the-webview"},"Open the Webview"),(0,s.kt)("p",null,"The webview can be opened with a ",(0,s.kt)("inlineCode",{parentName:"p"},"WebviewButton")," in the chatroom.\nFor example:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-tsx"},"import * as Messenger from '@machinat/messenger/components';\nimport { WebviewButton as MessengerWebviewButton } from '@machinat/messenger/webview';\n\napp.onEvent(async ({ reply }) => {\n  await reply(\n    <Messenger.ButtonTemplate\n      buttons={\n        <MessengerWebviewButton title=\"Open \ud83d\udce4\" />\n      }\n    >\n      Hello Webview!\n    </Messenger.ButtonTemplate>\n  );\n});\n")),(0,s.kt)("p",null,"The user will be asked to enter a login code sent in the chat.\nAfter login, webview can communicate to the server as the authenticated user."),(0,s.kt)("p",null,"Check the ",(0,s.kt)("a",{parentName:"p",href:"https://machinat.com/docs/embedded-webview"},"webview platform document"),"\nto learn more."),(0,s.kt)("h2",{id:"assets-manager"},"Assets Manager"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://machinat.com/api/classes/messenger_asset.messengerassetsmanager.html"},(0,s.kt)("inlineCode",{parentName:"a"},"MessengerAssetsManager")),"\nservice helps you to manage resources on the Messenger platform,\nlike attachments and personas."),(0,s.kt)("p",null,"To use it, you have to install a ",(0,s.kt)("a",{parentName:"p",href:"./using-states"},"state provider")," first.\nThen register ",(0,s.kt)("inlineCode",{parentName:"p"},"MessengerAssetsManager")," like this:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"import RedisState from '@machiniat/redis';\n// highlight-next-line\nimport MessengerAssetsManager, { saveReusableAttachments } from '@machinat/messenger/asssets';\n\nconst app = Machinat.createApp({\n  services: [\n    // highlight-next-line\n    MessengerAssetsManager,\n  ],\n  platforms: [\n    Messenger.initModule({\n      // ...\n      dispatchMiddlewares: [\n        // highlight-next-line\n        saveReusableAttachments,\n      ]\n    }),\n  ],\n  modules: [\n    RedisState.initModule({\n      clientOptions: { url: REDIS_URL },\n    }),\n  ],\n});\n")),(0,s.kt)("p",null,"Here is an example to upload a reusable attachment:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-tsx"},"import fs from 'fs';\nimport { makeContainer } from '@machinat/core';\nimport * as Messenger from '@machinat/messenger/components';\nimport MessengerAssetsManager from '@machinat/messenger/asssets';\n\napp.onEvent(makeContainer({ deps: [MessengerAssetsManager] })(\n  (assetsManager) =>\n    async ({ reply }) => {\n      const fooImageId = await assetsManager.getAttachment('foo.image');\n\n      if (fooImageId) {\n        await reply(\n          <Messenger.Image attachmentId={fooImageId} />\n        );\n      } else {\n        await reply(\n          <Messenger.Image\n            reusable\n            assetTag=\"foo.image\"\n            fileData={fs.createReadStream('./assets/foo.jpg')}\n          />\n        );\n      }\n}\n));\n")),(0,s.kt)("p",null,"If you upload an attachment with ",(0,s.kt)("inlineCode",{parentName:"p"},"reusable")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"assetTag")," props,\nthe ",(0,s.kt)("inlineCode",{parentName:"p"},"saveReusableAttachments")," middleware will save the returned attachment id.\nYou can reuse the saved id for the next time."),(0,s.kt)("h2",{id:"resources"},"Resources"),(0,s.kt)("p",null,"Here are some resources for further reading:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://machinat.com/api/modules/messenger.html"},(0,s.kt)("inlineCode",{parentName:"a"},"@machinat/messenger")," package reference")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://developers.facebook.com/docs/messenger-platform"},"Messenger Platform document"))))}g.isMDXComponent=!0}}]);