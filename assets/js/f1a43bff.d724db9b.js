"use strict";(self.webpackChunkmachinat_github_io=self.webpackChunkmachinat_github_io||[]).push([[159],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=o.createContext({}),d=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=d(e.components);return o.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=d(n),m=a,h=u["".concat(l,".").concat(m)]||u[m]||p[m]||r;return n?o.createElement(h,i(i({ref:t},c),{},{components:n})):o.createElement(h,i({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var d=2;d<r;d++)i[d]=n[d];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5162:function(e,t,n){n.d(t,{Z:function(){return i}});var o=n(7294),a=n(6010),r="tabItem_Ymn6";function i(e){var t=e.children,n=e.hidden,i=e.className;return o.createElement("div",{role:"tabpanel",className:(0,a.Z)(r,i),hidden:n},t)}},5488:function(e,t,n){n.d(t,{Z:function(){return m}});var o=n(7462),a=n(7294),r=n(6010),i=n(2389),s=n(7392),l=n(7094),d=n(2466),c="tabList__CuJ",p="tabItem_LNqP";function u(e){var t,n,i=e.lazy,u=e.block,m=e.defaultValue,h=e.values,k=e.groupId,g=e.className,f=a.Children.map(e.children,(function(e){if((0,a.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),v=null!=h?h:f.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),w=(0,s.l)(v,(function(e,t){return e.value===t.value}));if(w.length>0)throw new Error('Docusaurus error: Duplicate values "'+w.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var T=null===m?m:null!=(t=null!=m?m:null==(n=f.find((function(e){return e.props.default})))?void 0:n.props.value)?t:f[0].props.value;if(null!==T&&!v.some((function(e){return e.value===T})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+T+'" but none of its children has the corresponding value. Available values are: '+v.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var b=(0,l.U)(),N=b.tabGroupChoices,C=b.setTabGroupChoices,y=(0,a.useState)(T),x=y[0],A=y[1],O=[],E=(0,d.o5)().blockElementScrollPositionUntilNextRender;if(null!=k){var P=N[k];null!=P&&P!==x&&v.some((function(e){return e.value===P}))&&A(P)}var I=function(e){var t=e.currentTarget,n=O.indexOf(t),o=v[n].value;o!==x&&(E(t),A(o),null!=k&&C(k,String(o)))},S=function(e){var t,n=null;switch(e.key){case"ArrowRight":var o,a=O.indexOf(e.currentTarget)+1;n=null!=(o=O[a])?o:O[0];break;case"ArrowLeft":var r,i=O.indexOf(e.currentTarget)-1;n=null!=(r=O[i])?r:O[O.length-1]}null==(t=n)||t.focus()};return a.createElement("div",{className:(0,r.Z)("tabs-container",c)},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":u},g)},v.map((function(e){var t=e.value,n=e.label,i=e.attributes;return a.createElement("li",(0,o.Z)({role:"tab",tabIndex:x===t?0:-1,"aria-selected":x===t,key:t,ref:function(e){return O.push(e)},onKeyDown:S,onFocus:I,onClick:I},i,{className:(0,r.Z)("tabs__item",p,null==i?void 0:i.className,{"tabs__item--active":x===t})}),null!=n?n:t)}))),i?(0,a.cloneElement)(f.filter((function(e){return e.props.value===x}))[0],{className:"margin-top--md"}):a.createElement("div",{className:"margin-top--md"},f.map((function(e,t){return(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==x})}))))}function m(e){var t=(0,i.Z)();return a.createElement(u,(0,o.Z)({key:String(t)},e))}},8189:function(e,t,n){n.r(t),n.d(t,{UseAddingTodoScript:function(){return h},assets:function(){return m},contentTitle:function(){return p},default:function(){return f},frontMatter:function(){return c},metadata:function(){return u},toc:function(){return k}});var o=n(7462),a=n(3366),r=(n(7294),n(3905)),i=n(3066),s=n(5488),l=n(5162),d=["components"],c={title:"Dialog Script"},p=void 0,u={unversionedId:"learn/dialog-script",id:"learn/dialog-script",title:"Dialog Script",description:"To serve in chat, it's often that we need to ask a series of questions and wait for the answers.",source:"@site/docs/learn/dialog-script.mdx",sourceDirName:"learn",slug:"/learn/dialog-script",permalink:"/docs/learn/dialog-script",draft:!1,editUrl:"https://github.com/machinat/machinat/edit/master/website/docs/learn/dialog-script.mdx",tags:[],version:"current",frontMatter:{title:"Dialog Script"},sidebar:"docs",previous:{title:"Recognize Intent",permalink:"/docs/learn/recognize-intent"},next:{title:"Webview in Chat",permalink:"/docs/learn/webview-in-chat"}},m={},h=function(e){var t=e.platform;return(0,r.kt)("div",null,(0,r.kt)(i.Z,{language:"tsx",title:"src/handlers/handleChat.tsx",mdxType:"CodeBlock"},"// highlight-next-line\nimport AddingTodo from '../scenes/AddingTodo';\n// ...\nconst handleChat = makeContainer({\n  deps: [useIntent, useUserProfile, TodoController],\n})(\n  (getIntent, getUserProfile, todoController) =>\n  async (\n    ctx: ChatEventContext & { event: { category: 'message' | 'postback' } }\n  ) => {\n      const { event, reply } = ctx;\n      const intent = await getIntent(event);"+("telegram"===t?"\n      if (!event.channel) {\n        return;\n      }":"")+"\n\n      if (intent.type === 'add') {\n        // highlight-next-line\n        return reply(<AddingTodo.Start />);\n      }\n      //..."))},k=[{value:"Make a Conversation",id:"make-a-conversation",level:2},{value:"Build a Script",id:"build-a-script",level:3},{value:"Script Content",id:"script-content",level:3},{value:"Register Script",id:"register-script",level:3},{value:"Use Script",id:"use-script",level:3},{value:"<code>PROMPT</code> For an Answer",id:"prompt-for-an-answer",level:3},{value:"Script Vars",id:"script-vars",level:3},{value:"Execute <code>EFFECT</code>",id:"execute-effect",level:3},{value:"Content With <code>vars</code>",id:"content-with-vars",level:3},{value:"Flow Control",id:"flow-control",level:3},{value:"<code>CALL</code> a Script",id:"call-a-script",level:3}],g={UseAddingTodoScript:h,toc:k};function f(e){var t=e.components,i=(0,a.Z)(e,d);return(0,r.kt)("wrapper",(0,o.Z)({},g,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"To serve in chat, it's often that we need to ask a series of questions and wait for the answers.\nIn this lesson, you'll learn how to program such conversation flows in a chat."),(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("em",{parentName:"p"},"Time to accomplish: 20 minutes"))),(0,r.kt)("h2",{id:"make-a-conversation"},"Make a Conversation"),(0,r.kt)("p",null,"After recognizing the adding todo intent, the bot should ask for the new todo name.\nTo do this, we have to handle the ",(0,r.kt)("em",{parentName:"p"},"prompt and wait")," flow in our codes."),(0,r.kt)("p",null,"In Machinat, it can be done by a ",(0,r.kt)("strong",{parentName:"p"},"Dialog Script"),"."),(0,r.kt)("h3",{id:"build-a-script"},"Build a Script"),(0,r.kt)("p",null,"Let's add our first script for adding a todo.\nCreate ",(0,r.kt)("inlineCode",{parentName:"p"},"src/scenes/AddingTodo.tsx")," file with the following content:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/scenes/AddingTodo.tsx"',title:'"src/scenes/AddingTodo.tsx"'},"import Machinat from '@machinat/core';\nimport { build } from '@machinat/script';\nimport * as $ from '@machinat/script/keywords';\n\nexport default build(\n  {\n    name: 'AddingTodo',\n  },\n  <$.BLOCK>\n    {() => <p>Please enter new todo name:</p>}\n  </$.BLOCK>\n);\n")),(0,r.kt)("p",null,"Here we ",(0,r.kt)("inlineCode",{parentName:"p"},"build")," a script for the adding todo conversation.\nThe script body is a special JSX block to describe the flow."),(0,r.kt)("h3",{id:"script-content"},"Script Content"),(0,r.kt)("p",null,"In the script body, the function ",(0,r.kt)("inlineCode",{parentName:"p"},"{() => <p>...</p>}")," is a content node.\nThe function will be called when it's met in the flow,\nand the returned messages will be sent in the chat."),(0,r.kt)("h3",{id:"register-script"},"Register Script"),(0,r.kt)("p",null,"The newly created script needs to be registered first.\nEdit ",(0,r.kt)("inlineCode",{parentName:"p"},"src/scenes/index.tsx")," and export ",(0,r.kt)("inlineCode",{parentName:"p"},"AddingTodo")," like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/scenes/index.tsx"',title:'"src/scenes/index.tsx"'},"export { default as AddingTodo } from './AddingTodo';\n")),(0,r.kt)("h3",{id:"use-script"},"Use Script"),(0,r.kt)("p",null,"Now we can use the new ",(0,r.kt)("inlineCode",{parentName:"p"},"AddingTodo")," script in the ",(0,r.kt)("inlineCode",{parentName:"p"},"handleChat")," handler:"),(0,r.kt)(s.Z,{groupId:"chat-platforms",defaultValue:"messenger",values:[{label:"Messenger",value:"messenger"},{label:"Telegram",value:"telegram"},{label:"LINE",value:"line"}],mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"messenger",mdxType:"TabItem"},(0,r.kt)(h,{platform:"messenger",mdxType:"UseAddingTodoScript"})),(0,r.kt)(l.Z,{value:"telegram",mdxType:"TabItem"},(0,r.kt)(h,{platform:"telegram",mdxType:"UseAddingTodoScript"})),(0,r.kt)(l.Z,{value:"line",mdxType:"TabItem"},(0,r.kt)(h,{platform:"line",mdxType:"UseAddingTodoScript"}))),(0,r.kt)("p",null,"You should see the content in the script is replied like this:"),(0,r.kt)("img",{width:400,src:n(8704).Z}),(0,r.kt)("p",null,"When we reply with ",(0,r.kt)("inlineCode",{parentName:"p"},"AddingTodo.Start"),", it runs the ",(0,r.kt)("inlineCode",{parentName:"p"},"AddingTodo")," script on the chat.\nAfter that, the script processor will take over the chat until the running script is finished."),(0,r.kt)("h3",{id:"prompt-for-an-answer"},(0,r.kt)("inlineCode",{parentName:"h3"},"PROMPT")," For an Answer"),(0,r.kt)("p",null,"Currently, the ",(0,r.kt)("inlineCode",{parentName:"p"},"AddingTodo")," script immediately ends.\nLet's add a ",(0,r.kt)("inlineCode",{parentName:"p"},"PROMPT")," to stop the script and wait for the answer."),(0,r.kt)("p",null,"Add the these codes in the script:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'{5-7,9,12,17-23} title="src/scenes/AddingTodo.tsx"',"{5-7,9,12,17-23}":!0,title:'"src/scenes/AddingTodo.tsx"'},"import Machinat from '@machinat/core';\nimport { build } from '@machinat/script';\nimport * as $ from '@machinat/script/keywords';\n\ntype AddingTodoVars = {\n  todoName: string;\n};\n\nexport default build<AddingTodoVars>(\n  {\n    name: 'AddingTodo',\n    initVars: () => ({ todoName: '' }),\n  },\n  <$.BLOCK>\n    {() => <p>Please enter new todo name:</p>}\n\n    <$.PROMPT<AddingTodoVars>\n      key=\"ask-todo\"\n      set={({ vars }, { event }) => ({\n        ...vars,\n        todoName: event.type === 'text' ? event.text : '',\n      })}\n    />\n  </$.BLOCK>\n);\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"PROMPT")," keyword stops the execution of the script.\nWhen the user answers, the script will start executing again from the ",(0,r.kt)("inlineCode",{parentName:"p"},"PROMPT")," point."),(0,r.kt)("h3",{id:"script-vars"},"Script Vars"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"vars")," is a special state that exists while the script is running.\nIt's initiated by the ",(0,r.kt)("inlineCode",{parentName:"p"},"initVars")," function when the script starts.\nHere we store the user's answer at ",(0,r.kt)("inlineCode",{parentName:"p"},"vars.todoName"),"."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"set")," prop of ",(0,r.kt)("inlineCode",{parentName:"p"},"PROMPT")," is called when the user answers.\nIt receives two args:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"an environment object that contains current ",(0,r.kt)("inlineCode",{parentName:"li"},"vars")),(0,r.kt)("li",{parentName:"ul"},"event context of the answered message")),(0,r.kt)("p",null,"Then we return the new ",(0,r.kt)("inlineCode",{parentName:"p"},"vars")," value which sets the ",(0,r.kt)("inlineCode",{parentName:"p"},"todoName")," for later use."),(0,r.kt)("h3",{id:"execute-effect"},"Execute ",(0,r.kt)("inlineCode",{parentName:"h3"},"EFFECT")),(0,r.kt)("p",null,"Now we have the ",(0,r.kt)("inlineCode",{parentName:"p"},"todoName")," answered by the user,\nthe next thing is to save it in the state.\nWe can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"EFFECT")," keyword to do that:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'{1,4,8,14,27-38} title="src/scenes/AddingTodo.tsx"',"{1,4,8,14,27-38}":!0,title:'"src/scenes/AddingTodo.tsx"'},"import Machinat, { makeContainer } from '@machinat/core';\nimport { build } from '@machinat/script';\nimport * as $ from '@machinat/script/keywords';\nimport TodoController from '../services/TodoController';\n\ntype AddingTodoVars = {\n  todoName: string;\n  todosCount: number;\n};\n\nexport default build<AddingTodoVars>(\n  {\n    name: 'AddingTodo',\n    initVars: () => ({ todoName: '', todosCount: 0 }),\n  },\n  <$.BLOCK>\n    {() => <p>Please enter new todo name:</p>}\n\n    <$.PROMPT<AddingTodoVars>\n      key=\"ask-todo\"\n      set={({ vars }, { event }) => ({\n        ...vars,\n        todoName: event.type === 'text' ? event.text : '',\n      })}\n    />\n\n    <$.EFFECT<AddingTodoVars>\n      set={makeContainer({ deps: [TodoController] })(\n        (todoController) =>\n          async ({ vars, channel }) => {\n            const { data } = await todoController.addTodo(\n              channel,\n              vars.todoName\n            );\n            return { ...vars, todosCount: data.todos.length };\n          }\n      )}\n    />\n  </$.BLOCK>\n);\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"EFFECT")," keyword can be used to execute a side effect and update the ",(0,r.kt)("inlineCode",{parentName:"p"},"vars"),".\nHere we save the new todo and set ",(0,r.kt)("inlineCode",{parentName:"p"},"vars.todosCount")," for later use."),(0,r.kt)("p",null,"Note that we use a ",(0,r.kt)("strong",{parentName:"p"},"service container")," to require ",(0,r.kt)("inlineCode",{parentName:"p"},"TodoController"),".\nAll the functional props on the keywords can accept a container."),(0,r.kt)("h3",{id:"content-with-vars"},"Content With ",(0,r.kt)("inlineCode",{parentName:"h3"},"vars")),(0,r.kt)("p",null,"We can also use ",(0,r.kt)("inlineCode",{parentName:"p"},"vars")," to generate content.\nAdd the message to show the adding result like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'{1,4-8} title="src/scenes/AddingTodo.tsx"',"{1,4-8}":!0,title:'"src/scenes/AddingTodo.tsx"'},"import WithMenu from '../components/WithMenu';\n// ...\n\n    {({ vars: { todoName, todosCount } }) => (\n      <WithMenu todoCount={todosCount}>\n        Todo \"<b>{todoName}</b>\" is added!\n      </WithMenu>\n    )}\n  </$.BLOCK>\n);\n")),(0,r.kt)("p",null,"Now a todo can be added like this:"),(0,r.kt)("video",{width:420,autoplay:"autoplay",loop:!0,inline:!0,muted:!0},(0,r.kt)("source",{src:n(3863).Z,type:"video/webm"})),(0,r.kt)("h3",{id:"flow-control"},"Flow Control"),(0,r.kt)("p",null,"Now it could be a problem if a non-text message is received.\nWe can use ",(0,r.kt)("inlineCode",{parentName:"p"},"WHILE")," keyword to verify the input:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'{3-5,15} title="src/scenes/AddingTodo.tsx"',"{3-5,15}":!0,title:'"src/scenes/AddingTodo.tsx"'},"// ...\n  <$.BLOCK>\n    <$.WHILE<AddingTodoVars>\n      condition={({ vars }) => vars.todoName === ''}\n    >\n      {() => <p>Please enter new todo name:</p>}\n\n      <$.PROMPT<AddingTodoVars>\n        key=\"ask-todo\"\n        set={({ vars }, { event }) => ({\n          ...vars,\n          todoName: event.type === 'text' ? event.text : '',\n        })}\n      />\n    </$.WHILE>\n//...\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"WHILE")," works just like the ",(0,r.kt)("inlineCode",{parentName:"p"},"while")," keyword in programming languages.\nThe inner block would keep looping when the ",(0,r.kt)("inlineCode",{parentName:"p"},"condition")," is met."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"PROMPT")," is wrapped by the ",(0,r.kt)("inlineCode",{parentName:"p"},"WHILE")," block,\nso our bot would keep asking till the answer is ok.\nThe result looks like:"),(0,r.kt)("video",{width:420,autoplay:"autoplay",loop:!0,inline:!0,muted:!0},(0,r.kt)("source",{src:n(1022).Z,type:"video/webm"})),(0,r.kt)("p",null,"Despite ",(0,r.kt)("inlineCode",{parentName:"p"},"WHILE"),", there are other flow control keywords like ",(0,r.kt)("inlineCode",{parentName:"p"},"IF")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"RETURN"),".\nYou can easily control the dialog like coding."),(0,r.kt)("h3",{id:"call-a-script"},(0,r.kt)("inlineCode",{parentName:"h3"},"CALL")," a Script"),(0,r.kt)("p",null,"Like in programming language,\nwe can ",(0,r.kt)("inlineCode",{parentName:"p"},"CALL")," a script in another one to reuse the dialog flows."),(0,r.kt)("p",null,"Let's try calling ",(0,r.kt)("inlineCode",{parentName:"p"},"AddingTodo")," in a new script.\nCreate ",(0,r.kt)("inlineCode",{parentName:"p"},"src/scenes/AskingFirstTodo.tsx")," file with the following content:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'{39} title="src/scenes/AskingFirstTodo.tsx"',"{39}":!0,title:'"src/scenes/AskingFirstTodo.tsx"'},"import Machinat, { makeContainer } from '@machinat/core';\nimport { build } from '@machinat/script';\nimport * as $ from '@machinat/script/keywords';\nimport AddingTodo from './AddingTodo';\nimport useIntent from '../services/useIntent';\n\ntype AskingFirstTodoVars = {\n  ok: boolean;\n};\n\nexport default build<AskingFirstTodoVars>(\n  {\n    name: 'AskingFirstTodo',\n    initVars: () => ({ ok: false }),\n  },\n  <>\n    {() => <p>You have no todo now. Do you want to create one?</p>}\n\n    <$.PROMPT<AskingFirstTodoVars>\n      key=\"ask-adding\"\n      set={makeContainer({ deps: [useIntent] })(\n        (getIntent) =>\n          async (_, { event }) => {\n            const intent = await getIntent(event);\n            return {\n              ok: intent.type === 'yes' || intent.type === 'add',\n            };\n          }\n      )}\n    />\n\n    <$.IF<AskingFirstTodoVars> condition={({ vars: { ok } }) => !ok}>\n      <$.THEN>\n        {() => <p>Ok, tell me when you need.</p>}\n        <$.RETURN />\n      </$.THEN>\n    </$.IF>\n\n    <$.CALL key=\"adding-todo\" script={AddingTodo} />\n  </>\n);\n")),(0,r.kt)("p",null,"In the script we ask the user whether to create the first todo.\nIf yes, call the ",(0,r.kt)("inlineCode",{parentName:"p"},"AddingTodo")," script to continue the creating process."),(0,r.kt)("p",null,"Remember to export the new script too:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'{2} title="src/scenes/index.tsx"',"{2}":!0,title:'"src/scenes/index.tsx"'},"export { default as AddingTodo } from './AddingTodo';\nexport { default as AskingFirstTodo } from './AskingFirstTodo';\n")),(0,r.kt)("p",null,"Then we can use it in ",(0,r.kt)("inlineCode",{parentName:"p"},"handleChat")," when a user doesn't have any todo:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'{1,5-16,19} title="src/handlers/handleChat.tsx"',"{1,5-16,19}":!0,title:'"src/handlers/handleChat.tsx"'},"import AskingFirstTodo from '../scenes/AskingFirstTodo';\n// ...\n    const profile = await profiler.getUserProfile(event.user);\n    const { data } = await todoController.getTodos(event.channel);\n    const hello = (\n      <p>Hello{profile ? `, ${profile.name}` : ''}! I'm a Todo Bot \ud83e\udd16</p>\n    );\n\n    if (data.todos.length === 0) {\n      return reply(\n        <>\n          {hello}\n          <AskingFirstTodo.Start />\n        </>\n      );\n    }\n\n    return reply(\n      <WithMenu todoCount={data.todos.length}>{hello}</WithMenu>\n    );\n  }\n);\n\nexport default handleChat;\n")),(0,r.kt)("p",null,"Now the bot asks users to create the first todo like:"),(0,r.kt)("video",{width:420,autoplay:"autoplay",loop:!0,inline:!0,muted:!0},(0,r.kt)("source",{src:n(5385).Z,type:"video/mp4"})),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Delete the todos data in ",(0,r.kt)("inlineCode",{parentName:"p"},".state_data.json")," file to try this feature."))),(0,r.kt)("hr",null),(0,r.kt)("p",null,"Our bot can process a dialog according to the script now.\nNext, we'll learn how to use a webview to provide more features."))}f.isMDXComponent=!0},8704:function(e,t,n){t.Z=n.p+"assets/images/add-todo-script-1-ccbc1d67b959522c03dd9453903bdeb9.png"},3863:function(e,t,n){t.Z=n.p+"assets/medias/add-todo-script-2-a685bd784021817e460791c66f4d0fe9.webm"},1022:function(e,t,n){t.Z=n.p+"assets/medias/add-todo-script-3-583405862bed977ce503e0a54f0f68c2.webm"},5385:function(e,t,n){t.Z=n.p+"assets/medias/hello-with-script-e1a7f1c2abd24f41cddce546ec859d42.mp4"}}]);