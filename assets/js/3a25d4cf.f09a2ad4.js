"use strict";(self.webpackChunkmachinat_github_io=self.webpackChunkmachinat_github_io||[]).push([[1263],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return h}});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var p=a.createContext({}),s=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=s(e.components);return a.createElement(p.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=s(t),h=i,d=u["".concat(p,".").concat(h)]||u[h]||m[h]||r;return t?a.createElement(d,o(o({ref:n},c),{},{components:t})):a.createElement(d,o({ref:n},c))}));function h(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,o=new Array(r);o[0]=u;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var s=2;s<r;s++)o[s]=t[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},7864:function(e,n,t){t.r(n),t.d(n,{assets:function(){return c},contentTitle:function(){return p},default:function(){return h},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return m}});var a=t(7462),i=t(3366),r=(t(7294),t(3905)),o=["components"],l={title:"Line Platform",sidebar_label:"Line"},p=void 0,s={unversionedId:"line-platform",id:"line-platform",title:"Line Platform",description:"The @machinat/line platform enable your app to receive/send messages as a",source:"@site/docs/line-platform.md",sourceDirName:".",slug:"/line-platform",permalink:"/docs/line-platform",draft:!1,editUrl:"https://github.com/machinat/machinat/edit/master/website/docs/line-platform.md",tags:[],version:"current",frontMatter:{title:"Line Platform",sidebar_label:"Line"},sidebar:"docs",previous:{title:"Telegram",permalink:"/docs/telegram-platform"},next:{title:"Introduction",permalink:"/docs/learn"}},c={},m=[{value:"Install",id:"install",level:2},{value:"Setup",id:"setup",level:2},{value:"Usage",id:"usage",level:2},{value:"Webview",id:"webview",level:2},{value:"Auth Setup",id:"auth-setup",level:3},{value:"Open the Webview",id:"open-the-webview",level:3},{value:"Assets Manager",id:"assets-manager",level:2},{value:"Resources",id:"resources",level:2}],u={toc:m};function h(e){var n=e.components,t=(0,i.Z)(e,o);return(0,r.kt)("wrapper",(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"@machinat/line")," platform enable your app to receive/send messages as a\n",(0,r.kt)("a",{parentName:"p",href:"https://www.linebiz.com/jp-en/other/"},"LINE official account"),"."),(0,r.kt)("h2",{id:"install"},"Install"),(0,r.kt)("p",null,"Install the ",(0,r.kt)("inlineCode",{parentName:"p"},"core"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"http")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"line")," packages:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm install @machinat/core @machinat/http @machinat/line\n")),(0,r.kt)("h2",{id:"setup"},"Setup"),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"You can check ",(0,r.kt)("a",{parentName:"p",href:"https://machinat.com/docs/learn/create-app#platform-setup?p=line"},"setup section in the tutorial"),".\nIt brings you to set up everything step by step."))),(0,r.kt)("p",null,"First, you need to apply a LINE messaging API channel for the chatbot.\nFollow ",(0,r.kt)("a",{parentName:"p",href:"https://developers.line.biz/en/docs/messaging-api/building-bot/"},"the official guide"),"\nfor the setup procedures."),(0,r.kt)("p",null,"Then set up the ",(0,r.kt)("inlineCode",{parentName:"p"},"http")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"line")," module like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import Machinat from '@machinat/core';\nimport Http from '@machinat/http';\nimport Line from '@machinat/line';\n\nconst {\n  LINE_PROVIDER_ID,\n  LINE_CHANNEL_ID,\n  LINE_ACCESS_TOKEN,\n  LINE_CHANNEL_SECRET,\n} = process.env;\n\nconst app = Machinat.createApp({\n  modules: [\n    Http.initModule({ port: 8080 }),\n  ],\n  platforms: [\n    Line.intiModule({\n      webhookPath: '/webhook/line',       // webhook path\n      channelId: LINE_CHANNEL_ID,         // messaging API channel id\n      providerId: LINE_PROVIDER_ID,       // provider id of the channel\n      accessToken: LINE_ACCESS_TOKEN,     // channel access token\n      channelSecret: LINE_CHANNEL_SECRET, // channel secret\n    }),\n  ],\n});\n")),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("p",null,"Here's an example to receive events and send replies back:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import Machinat from \'@machinat/core\';\nimport * as Line from \'@machinat/line/components\';\nimport app from \'./app\';\n\napp.onEvent(async ({ platform, event, reply }) => {\n  if (platform === \'line\' && event.type === \'text\') {\n    await reply(\n      <Line.Expression\n        quickReplies={\n          <Line.QuickReply>\n            <Line.PostbackAction label="I want \ud83d\udc36" data="doggo" />\n          </Line.QuickReply>\n        }\n      >\n        Hello LINE! \ud83d\udc4b\n        <Line.ButtonTemplate\n          altText="You daily \ud83d\udc31: https://cataas.com/cat"\n          thumbnailImageUrl="https://cataas.com/cat"\n          actions={\n            <Line.PostbackAction label="More" data="catto" />\n          }\n        >\n          You daily \ud83d\udc31\n        </Line.ButtonTemplate>\n      </Line.Expression>\n    );\n  }\n});\n')),(0,r.kt)("p",null,"Check API references for the details of ",(0,r.kt)("a",{parentName:"p",href:"https://machinat.com/api/modules/line#lineevent"},"events"),"\nand ",(0,r.kt)("a",{parentName:"p",href:"https://machinat.com/api/modules/line_components"},"components"),"."),(0,r.kt)("h2",{id:"webview"},"Webview"),(0,r.kt)("h3",{id:"auth-setup"},"Auth Setup"),(0,r.kt)("p",null,"To use ",(0,r.kt)("a",{parentName:"p",href:"./embedded-webview"},"webviews")," in LINE,\nconfigure the app with these steps:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Create a ",(0,r.kt)("a",{parentName:"li",href:"https://developers.line.biz/en/docs/liff/registering-liff-apps/"},"LIFF app"),"\nwith URL to the webview page with ",(0,r.kt)("inlineCode",{parentName:"li"},"platform=line")," query.\nLike ",(0,r.kt)("inlineCode",{parentName:"li"},"https://your.server.domain/webview?platform=line"),"."),(0,r.kt)("li",{parentName:"ol"},"Set up ",(0,r.kt)("inlineCode",{parentName:"li"},"line")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"webview")," platform like this:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import Webview from '@machinat/webview';\nimport Line from '@machinat/line';\nimport LineAuth from '@machinat/line/webview';\n\nconst { LINE_LIFF_ID } = process.env;\n\nconst app = Machinat.createApp({\n  platforms: [\n    Line.initModule({\n      // add the login channel id\n      liffId: LINE_LIFF_ID,\n      // ...\n    }),\n    Webview.initModule({\n      authPlatforms: [\n        // add the auth provider\n        LineAuth,\n      ]\n      // ...\n    }),\n  ],\n});\n")),(0,r.kt)("ol",{start:3},(0,r.kt)("li",{parentName:"ol"},"Expose LIFF id in ",(0,r.kt)("inlineCode",{parentName:"li"},"next.config.js"),":")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const { LINE_LIFF_ID } = process.env;\n\nmodule.exports = {\n  publicRuntimeConfig: {\n    // highlight-next-line\n    LINE_LIFF_ID,\n  },\n};\n")),(0,r.kt)("ol",{start:4},(0,r.kt)("li",{parentName:"ol"},"Set up the ",(0,r.kt)("inlineCode",{parentName:"li"},"WebviewClient")," in the webview page:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import getConfig from 'next/config';\nimport WebviewClient from '@machinat/webview/client';\nimport LineAuth from '@machinat/line/webview/client';\n\nconst {\n  publicRuntimeConfig: { LINE_LIFF_ID },\n} = getConfig();\n\nconst client =  new WebviewClient({\n  authPlatforms: [\n    new LineAuth({ liffId: LINE_LIFF_ID }),\n  ],\n});\n")),(0,r.kt)("h3",{id:"open-the-webview"},"Open the Webview"),(0,r.kt)("p",null,"The webview can be opened by a ",(0,r.kt)("inlineCode",{parentName:"p"},"WebviewAction")," in the chatroom.\nLike:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import * as Line from '@machinat/line/components';\nimport { WebviewAction as LineWebviewAction } from '@machinat/line/webview';\n\napp.onEvent(async ({ reply }) => {\n  await reply(\n    <Line.ButtonTemplate\n      altText=\"Hello World\"\n      actions={\n        <LineWebviewAction label=\"Open \ud83d\udce4\" />\n      }\n    >\n      Hello Webview!\n    </Line.ButtonTemplate>\n  );\n});\n")),(0,r.kt)("p",null,"The users will be logged in with LINE account in the webview.\nCheck the ",(0,r.kt)("a",{parentName:"p",href:"https://machinat.com/docs/embedded-webview"},"webview document"),"\nto learn more."),(0,r.kt)("h2",{id:"assets-manager"},"Assets Manager"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://machinat.com/api/classes/line_asset.lineassetsmanager.html"},(0,r.kt)("inlineCode",{parentName:"a"},"LineAssetsManager")),"\nservice helps you to manage resources on the LINE platform,\nlike ",(0,r.kt)("a",{parentName:"p",href:"https://developers.line.biz/en/docs/messaging-api/using-rich-menus/#using-rich-menus-introduction"},"richmenu"),"."),(0,r.kt)("p",null,"To use it, you have to install a ",(0,r.kt)("a",{parentName:"p",href:"./using-states"},"state provider")," first.\nThen register ",(0,r.kt)("inlineCode",{parentName:"p"},"LineAssetsManager")," like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import RedisState from '@machiniat/redis';\n// highlight-next-line\nimport LineAssetsManager from '@machinat/line/asssets';\n\nconst app = Machinat.createApp({\n  services: [\n    // highlight-next-line\n    LineAssetsManager,\n  ],\n  platforms: [\n    Line.initModule({/* ... */}),\n  ],\n  modules: [\n    RedisState.initModule({\n      clientOptions: { url: REDIS_URL },\n    }),\n  ],\n});\n")),(0,r.kt)("p",null,"Here is an example to reuse a richmenu:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import { makeContainer } from '@machinat/core';\nimport * as Line from '@machinat/line/components';\nimport LineAssetsManager from '@machinat/line/asssets';\n\napp.onEvent(\n  makeContainer({ deps: [LineAssetsManager] })(\n    (assetsManager) =>\n      async ({ reply }) => {\n        const fooMenuId = await assetsManager.getRichMenu('foo.menu');\n        await reply(<Line.LinkRichMenu id={fooMenuId} />);\n      }\n  )\n);\n")),(0,r.kt)("h2",{id:"resources"},"Resources"),(0,r.kt)("p",null,"Here are some resources for further reading:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://machinat.com/api/modules/line.html"},(0,r.kt)("inlineCode",{parentName:"a"},"@machinat/line")," package reference")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://developers.line.biz/en/docs/messaging-api/overview/"},"LINE Messaging API document")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://developers.line.biz/en/docs/liff/overview/"},"LINE Front-end Framework document"))))}h.isMDXComponent=!0}}]);