"use strict";(self.webpackChunkmachinat_github_io=self.webpackChunkmachinat_github_io||[]).push([[9222],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=u(n),m=r,k=d["".concat(s,".").concat(m)]||d[m]||c[m]||o;return n?a.createElement(k,l(l({ref:t},p),{},{components:n})):a.createElement(k,l({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var u=2;u<o;u++)l[u]=n[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8447:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return i},metadata:function(){return u},toc:function(){return c}});var a=n(7462),r=n(3366),o=(n(7294),n(3905)),l=["components"],i={title:"Using State"},s=void 0,u={unversionedId:"using-states",id:"using-states",title:"Using State",description:"A sociable app itself is a stateless server.",source:"@site/docs/using-states.md",sourceDirName:".",slug:"/using-states",permalink:"/docs/using-states",draft:!1,editUrl:"https://github.com/machinat/machinat/edit/master/website/docs/using-states.md",tags:[],version:"current",frontMatter:{title:"Using State"},sidebar:"docs",previous:{title:"Recognizing Intent",permalink:"/docs/recognizing-intent"},next:{title:"Dialog Script",permalink:"/docs/dialog-script"}},p={},c=[{value:"Install State Module",id:"install-state-module",level:2},{value:"Get Chat State",id:"get-chat-state",level:2},{value:"Update State",id:"update-state",level:2},{value:"<code>undefined</code> Means Empty",id:"undefined-means-empty",level:4},{value:"Cancel Updating",id:"cancel-updating",level:4},{value:"User State",id:"user-state",level:3},{value:"Global State",id:"global-state",level:3}],d={toc:c};function m(e){var t=e.components,n=(0,r.Z)(e,l);return(0,o.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"A sociable app itself is a stateless server.\nSo we need to keep the info of a chat/user in persistent storage.\nTherefore the bot can use the state data to provide services and better experiences."),(0,o.kt)("h2",{id:"install-state-module"},"Install State Module"),(0,o.kt)("p",null,"In development, it's recommended to use ",(0,o.kt)("inlineCode",{parentName:"p"},"FileState")," for easy debugging.\nBut in production, you need to switch to other production-ready implementation,\nlike ",(0,o.kt)("inlineCode",{parentName:"p"},"RedisState"),"."),(0,o.kt)("p",null,"You can register the state module like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { FileState } from '@machinat/dev-tools';\nimport RedisState from '@machinat/redis-state';\n\nconst { NODE_ENV, REDIS_URL } = process.env;\nconst DEV = NODE_ENV !== 'production';\n\nMachinat.createApp({\n  modules: [\n    DEV\n      ? FileState.initModule({\n          path: './.state_data.json',\n        })\n      : RedisState.initModule({\n          clientOptions: {\n            url: REDIS_URL,\n          },\n        }),\n    //...\n  ],\n  //...\n})\n")),(0,o.kt)("p",null,"For now the following state modules are officially supported,\nplease check the references for more details:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"pathname:///api/modules/dev_tools"},(0,o.kt)("inlineCode",{parentName:"a"},"@machinat/dev-tools")),": provide ",(0,o.kt)("inlineCode",{parentName:"li"},"FileState")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"InMemoryState")," for testing and debugging. Don't use them in production."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"pathname:///api/modules/redis_state"},(0,o.kt)("inlineCode",{parentName:"a"},"@machinat/redis-state")),": save and load state in ",(0,o.kt)("a",{parentName:"li",href:"https://redis.io/"},"Redis")," database.")),(0,o.kt)("h2",{id:"get-chat-state"},"Get Chat State"),(0,o.kt)("p",null,"Once you set the state provider up,\nyou can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"StateController")," service to access the state.\nFor example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { makeContainer, StateController } from '@machinat/core';\n\napp.onEvent(\n  makeContainer({ deps: [StateController] })(\n    (stateController) => async ({ event, reply }) => {\n      const bookmarks = await stateController\n        .channelState(event.channel)\n        .get('bookmarks');\n\n      if (bookmarks) {\n        await reply(`You have unread bookmarks:\\n${bookmarks.join('\\n')}`);\n      } else {\n        await reply('You have no saved bookmark');\n      }\n    };\n  );\n);\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"controller.channelState(channel)")," method returns an accessor to the chat state.\nThe state data is stored in key-value pairs, like a JavaScript ",(0,o.kt)("inlineCode",{parentName:"p"},"Map"),"."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"accessor.get(key)")," resolves the value saved on a key.\nIf no value has been saved before, it resolves ",(0,o.kt)("inlineCode",{parentName:"p"},"undefined"),"."),(0,o.kt)("h2",{id:"update-state"},"Update State"),(0,o.kt)("p",null,"To set a state value, use the ",(0,o.kt)("inlineCode",{parentName:"p"},"accessor.update(key, updater)")," method.\nFor example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"app.onEvent(\n  makeContainer({ deps: [StateController] })(\n    (stateController) => async ({ event, reply } ) => {\n      if (event.type === 'text') {\n        const matchAdding = event.text.match(/^add (.*)$/i);\n\n        if (matchAdding) {\n          const newBookmark = matchAdding[1];\n  \n          const bookmarks = await stateController\n            .channelState(event.channel)\n            .update(\n              'bookmarks',\n              (currentBookmarks = []) =>\n                [...currentBookmarks, newBookmark]\n            );\n          await reply(`You have ${bookmarks.length} bookmarks.`);\n        }\n      }\n      // ...\n    };\n  );\n);\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"update")," takes a key and an updater function,\nwhich receives the current value and returns the new value.\nThe returned value is then saved into the storage."),(0,o.kt)("p",null,"This mechanism makes it easy to update an array or object state value."),(0,o.kt)("h4",{id:"undefined-means-empty"},(0,o.kt)("inlineCode",{parentName:"h4"},"undefined")," Means Empty"),(0,o.kt)("p",null,"If no value has been saved, the updater receives an ",(0,o.kt)("inlineCode",{parentName:"p"},"undefined")," value.\nAnd if the updater returns ",(0,o.kt)("inlineCode",{parentName:"p"},"undefined"),", the value on the key will be deleted."),(0,o.kt)("p",null,"We can use ",(0,o.kt)("em",{parentName:"p"},"default parameter")," to handle ",(0,o.kt)("inlineCode",{parentName:"p"},"undefined")," value elegantly: "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"(currentBookmarks = []) =>\n  [...currentBookmarks, newBookmark]\n")),(0,o.kt)("h4",{id:"cancel-updating"},"Cancel Updating"),(0,o.kt)("p",null,"The new value is compared with the old value using ",(0,o.kt)("inlineCode",{parentName:"p"},"==="),".\nIf the same value is returned, no saving action will be made.\nFor example, this updating call is NOT going to work:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"await stateController\n  .channelState(event.channel)\n  .update('my_data', (data) => {\n    data.foo = 'bar';\n    return data; // the value is the same object\n  });\n")),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"So do not mutate the value in the updater. Always return a new one.")),(0,o.kt)("h3",{id:"user-state"},"User State"),(0,o.kt)("p",null,"Sometimes you might want to use the user state instead of chat state.\nTheir scopes are different  since a user can show up in many chatrooms."),(0,o.kt)("p",null,"To access the user state, use the ",(0,o.kt)("inlineCode",{parentName:"p"},"controller.userState(user)")," method.\nFor example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"app.onEvent(\n  makeContainer({ deps: [StateController] })(\n    (stateController) => async ({ event, reply }) => {\n      if (event.type === 'text') {\n        const matchCallMe = event.text.match(/^call me (.*)$/i);\n\n        if (matchCallMe) {\n          const nickname = matchCallMe[1];\n          await stateController\n            // highlight-next-line\n            .userState(event.user)\n            .update('nickname', () => nickname);\n  \n          return reply(`OK ${nickname}!`);\n        }\n      }\n\n      const nickname = await stateController\n        // highlight-next-line\n        .userState(event.user)\n        .get('nickname');\n      await reply(nickname ? `Hi ${nickname}!` : 'What should I call you?');\n    }\n  );\n);\n")),(0,o.kt)("p",null,"The state accessor usage is exactly the same with channel state."),(0,o.kt)("h3",{id:"global-state"},"Global State"),(0,o.kt)("p",null,"If you want to use state at the global scope,\nuse ",(0,o.kt)("inlineCode",{parentName:"p"},"controller.globalState(name)"),".\nFor example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const newYorkWeather = await stateController\n  .globalState('weathers')\n  .get('new_york');\n")))}m.isMDXComponent=!0}}]);