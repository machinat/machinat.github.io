"use strict";(self.webpackChunkmachinat_github_io=self.webpackChunkmachinat_github_io||[]).push([[8751],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return g}});var i=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,i,o=function(e,n){if(null==e)return{};var t,i,o={},r=Object.keys(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=i.createContext({}),s=function(e){var n=i.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},p=function(e){var n=s(e.components);return i.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},d=i.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=s(t),g=o,m=d["".concat(c,".").concat(g)]||d[g]||u[g]||r;return t?i.createElement(m,a(a({ref:n},p),{},{components:t})):i.createElement(m,a({ref:n},p))}));function g(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,a=new Array(r);a[0]=d;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var s=2;s<r;s++)a[s]=t[s];return i.createElement.apply(null,a)}return i.createElement.apply(null,t)}d.displayName="MDXCreateElement"},3589:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return c},default:function(){return g},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return u}});var i=t(7462),o=t(3366),r=(t(7294),t(3905)),a=["components"],l={title:"Recognizing Intent"},c=void 0,s={unversionedId:"recognizing-intent",id:"recognizing-intent",title:"Recognizing Intent",description:"Recognizing users' intent is essential to interact in a conversation.",source:"@site/docs/recognizing-intent.md",sourceDirName:".",slug:"/recognizing-intent",permalink:"/docs/recognizing-intent",draft:!1,editUrl:"https://github.com/machinat/machinat/edit/master/website/docs/recognizing-intent.md",tags:[],version:"current",frontMatter:{title:"Recognizing Intent"},sidebar:"docs",previous:{title:"Dependency Injection",permalink:"/docs/dependency-injection"},next:{title:"Using State",permalink:"/docs/using-states"}},p={},u=[{value:"Install",id:"install",level:2},{value:"Training Data in Codes",id:"training-data-in-codes",level:2},{value:"Usage",id:"usage",level:2},{value:"Combine Your Own Logic",id:"combine-your-own-logic",level:3},{value:"Use Features from Supplier",id:"use-features-from-supplier",level:3}],d={toc:u};function g(e){var n=e.components,t=(0,o.Z)(e,a);return(0,r.kt)("wrapper",(0,i.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Recognizing users' intent is essential to interact in a conversation.\nMachinat provides a standard interface for intent recognition,\nthat you can choose any recognition provider you like."),(0,r.kt)("h2",{id:"install"},"Install"),(0,r.kt)("p",null,"You have to install one recognition provider package.\nFor now these packages are officially supported:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"pathname:///api/modules/dialogflow"},"@machinat/dialogflow")," - detect intent using ",(0,r.kt)("a",{parentName:"li",href:"https://cloud.google.com/dialogflow/es/docs"},(0,r.kt)("inlineCode",{parentName:"a"},"Dialogflow ES")),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"pathname:///api/modules/dev_tools#regexp-intent-recognition"},"@machinat/dev-tools")," - provide ",(0,r.kt)("inlineCode",{parentName:"li"},"RegexRecognition"),", a simple implementation using ",(0,r.kt)("inlineCode",{parentName:"li"},"RegExp"),". It should only be used for testing or debugging.")),(0,r.kt)("p",null,"Please check the references for the setup guides.\nWe'll support more recognition suppliers in the future."),(0,r.kt)("h2",{id:"training-data-in-codes"},"Training Data in Codes"),(0,r.kt)("p",null,"Next, the intents recognition model requires data for training.\nThe training data can be maintained in codes like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// recognitionData.js\nexport default {\n  defaultLanguage: 'en',\n  // supported languages \n  languages: ['en'],\n  intents: {\n    // \"yes\" intent\n    yes: {\n      trainingPhrases: {\n        // phrases for language \"en\"\n        en: ['yes', 'ok', 'ya', 'nice', 'good', 'cool', 'fine'],\n      },\n    },\n    no: {\n      trainingPhrases: {\n        en: ['no', 'nope', 'sorry', 'later', 'maybe not'],\n      },\n    },\n  },\n};\n")),(0,r.kt)("p",null,"Then pass the recognition data to the provider like:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import recognitionData from './recognitionData';\n\nMachinat.createApp({\n  modules:[\n    Dialogflow.initModule({\n      recognitionData,\n      projectId: process.env.DIALOGFLOW_PROJECT_ID,\n    }),\n    //...\n  ],\n  //...\n});\n")),(0,r.kt)("p",null,"The provider would manage all the model training jobs.\nIf the data has changed, the model is automatically updated."),(0,r.kt)("p",null,"You only need to maintain the recognition data in the project,\nand the provider will handle the rest of the work."),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("p",null,"Once you set up the recognition provider,\nyou can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"IntentRecognizer")," service to detect intent.\nFor example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import { makeContainer, IntentRecognizer } from '@machinat/core';\n\napp.onEvent(\n  makeContainer({ deps: [IntentRecognizer] })(\n    (recognizer) =>\n      async ({ reply, event }) => {\n        if (event.category === 'message' && event.type === 'text') {\n          const { channel, text } = event;\n          const intent = await recognizer.detectText(channel, text);\n\n          if (intent.type === 'marry_me') {\n            if (intent.confidence > 0.5) {\n              return reply('Yes, I do!');\n            } else {\n              return reply('Are you kidding?');\n            }\n          } else {\n            return reply('\ud83d\ude42');\n          }\n        }\n      }\n  )\n);\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"detectText(channel, text)")," method detects the intent of a text message.\nIt returns the result with following info:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"type")," - ",(0,r.kt)("inlineCode",{parentName:"li"},"undefined | string"),", the intent name. If no intent is matched, the value is ",(0,r.kt)("inlineCode",{parentName:"li"},"undefined"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"confidence")," - ",(0,r.kt)("inlineCode",{parentName:"li"},"number"),", the confident level of the recognized intent, range 0-1."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"payload")," - ",(0,r.kt)("inlineCode",{parentName:"li"},"object"),", raw result data from the supplier.")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"IntentRecognizer")," service can be used no matter which provider you choose.\nYou don't have to change the recognizing codes if you change the provider."),(0,r.kt)("h3",{id:"combine-your-own-logic"},"Combine Your Own Logic"),(0,r.kt)("p",null,"Sometimes you might want to add your own recognizing logic.\nLike handling postback data, recognizing emoji or parsing special formats.\nYou can make your own recognizing service for that, like:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import { makeFactoryProvider, IntentRecognizer } from '@machinat/core';\n\nconst useIntent = makeFactoryProvider({ deps: [IntentRecognizer] })(\n  (recognizer) =>\n    async (event) => {\n      if (event.type === 'postback') {\n        const payload = JSON.parse(event.data);\n        return { type: payload.type, confidence: 1, payload };\n      }\n\n      if (event.type === 'text') {\n        const text = event.text.trim();\n\n        if (/^(yes|ok|good|\ud83d\udc4c|\ud83d\udc4d)$/i.test(text)) {\n          return { type: 'yes', confidence: 1, payload: null };\n        }\n\n        const matchFooCommand = text.match(/^\\/foo (bar|baz)$/);\n        if (matchFooCommand) {\n          return { type: 'foo', confidence: 1, payload: matchFooCommand[1] };\n        }\n\n        const intent = await recognizer.detectText(event.channel, text);\n        return intent;\n      }\n\n      return { type: undefined, confidence: 0, payload: null };\n    }\n);\n")),(0,r.kt)("p",null,"Then use your recognizing service to detect intent like:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import { makeContainer } from '@machinat/core';\nimport useIntent from './useIntent';\n\napp.onEvent(\n  makeContainer({ deps: [useIntent] })(\n    (getIntent) =>\n    async ({ event }) => {\n      const intent = await getIntent(event);\n      console.log(intent.type);\n    }\n  )\n);\n")),(0,r.kt)("h3",{id:"use-features-from-supplier"},"Use Features from Supplier"),(0,r.kt)("p",null,"If you need features of a specific supplier,\nyou can use the implementation provider directly.\nFor example, use ",(0,r.kt)("inlineCode",{parentName:"p"},"DialogFlow.Recognizer")," like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import { makeContainer } from '@machinat/core';\nimport DialogFlow from '@machinat/dialogflow';\n\nmakeContainer({ deps: [DialogFlow.Recognizer] })(\n  (recognizer) =>\n  async (context) => {\n    const { channel, text } = context.event;\n    const intent = await recognizer.detectText(channel, text, {\n      contexts: ['greeting'],\n    });\n\n    console.log(intent.payload.sentimentAnalysisResult);\n  }\n);\n")),(0,r.kt)("p",null,"Note that you can only use the provider you register in the app."))}g.isMDXComponent=!0}}]);