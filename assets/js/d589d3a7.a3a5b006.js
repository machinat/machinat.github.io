"use strict";(self.webpackChunkmachinat_github_io=self.webpackChunkmachinat_github_io||[]).push([[7162],{3905:function(e,t,n){n.d(t,{Zo:function(){return m},kt:function(){return d}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),h=p(n),d=r,u=h["".concat(s,".").concat(d)]||h[d]||c[d]||i;return n?a.createElement(u,o(o({ref:t},m),{},{components:n})):a.createElement(u,o({ref:t},m))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},9390:function(e,t,n){n.r(t),n.d(t,{assets:function(){return m},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return c}});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),o=["components"],l={title:"Getting Started",slug:"/"},s=void 0,p={unversionedId:"getting-started",id:"getting-started",title:"Getting Started",description:"Welcome to the Machinat framework document!",source:"@site/docs/getting-started.md",sourceDirName:".",slug:"/",permalink:"/docs/",draft:!1,editUrl:"https://github.com/machinat/machinat/edit/master/website/docs/getting-started.md",tags:[],version:"current",frontMatter:{title:"Getting Started",slug:"/"},sidebar:"docs",next:{title:"Receiving Events",permalink:"/docs/receiving-events"}},m={},c=[{value:"System Requirement",id:"system-requirement",level:2},{value:"Create Machinat App",id:"create-machinat-app",level:2},{value:"Platforms",id:"platforms",level:3},{value:"Project Directory Structure",id:"project-directory-structure",level:3},{value:"Env Configs",id:"env-configs",level:3},{value:"Migrations",id:"migrations",level:3},{value:"Start Dev Server",id:"start-dev-server",level:3},{value:"Manually Install",id:"manually-install",level:2},{value:"Core Modules",id:"core-modules",level:3},{value:"Platforms",id:"platforms-1",level:3},{value:"Enabling JSX",id:"enabling-jsx",level:2},{value:"With TypeScript",id:"with-typescript",level:3},{value:"With Babel",id:"with-babel",level:3},{value:"Import <code>Machinat</code>",id:"import-machinat",level:3},{value:"Listening to HTTP",id:"listening-to-http",level:2},{value:"Starting App",id:"starting-app",level:2}],h={toc:c};function d(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Welcome to the Machinat framework document!"),(0,i.kt)("p",null,"If you are new to Machinat, we recommend starting from ",(0,i.kt)("a",{parentName:"p",href:"/docs/learn"},"the tutorial"),".\nIt brings you to build a complete app step by step."),(0,i.kt)("h2",{id:"system-requirement"},"System Requirement"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://nodejs.org/"},"Node.js")," 10.13 or later")),(0,i.kt)("h2",{id:"create-machinat-app"},"Create Machinat App"),(0,i.kt)("p",null,"We recommend to create a Machinat app project with ",(0,i.kt)("inlineCode",{parentName:"p"},"@machinat/create-app"),"\ninitiator. Run this command to create a hello-world project:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npm init @machinat/app@latest -- -p <platform> [-p <platform> ...] <project-path>\n")),(0,i.kt)("p",null,"Or using ",(0,i.kt)("inlineCode",{parentName:"p"},"yarn"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"yarn create @machinat/app -p <platform> [-p <platform> ...] <project-path>\n")),(0,i.kt)("h3",{id:"platforms"},"Platforms"),(0,i.kt)("p",null,"The following platforms are supported for now:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"messenger")," - receive/send messages as a Facebook page in ",(0,i.kt)("a",{parentName:"li",href:"https://www.messenger.com"},"Messenger"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"telegram")," - receive/send messages as a bot in ",(0,i.kt)("a",{parentName:"li",href:"https://telegram.org"},"Telegram"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"line")," - receive/send messages as a ",(0,i.kt)("a",{parentName:"li",href:"https://line.me"},"LINE")," official account."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"webview")," - extend embedded webviews on the chat platforms.")),(0,i.kt)("h3",{id:"project-directory-structure"},"Project Directory Structure"),(0,i.kt)("p",null,"After the command is finished, it create the new project with following structure:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},".\n\u251c\u2500\u2500 src\n\u2502   \u251c\u2500\u2500 cli                     # executable bin\n\u2502   \u2502   \u2514\u2500\u2500 ...\n\u2502   \u251c\u2500\u2500 components              # chat UI components\n\u2502   \u2502   \u2514\u2500\u2500 ...\n\u2502   \u251c\u2500\u2500 handlers                # event handlers\n\u2502   \u2502   \u251c\u2500\u2500 handleChat.tsx      # handle chat events\n\u2502   \u2502   \u251c\u2500\u2500 handleWebview.tsx   # handle webview events\n\u2502   \u2502   \u2514\u2500\u2500 ...\n\u2502   \u251c\u2500\u2500 scenes                  # dialog scripts\n\u2502   \u2502   \u2514\u2500\u2500 ...\n\u2502   \u251c\u2500\u2500 services                # common services\n\u2502   \u2502   \u251c\u2500\u2500 useIntent.ts        # detect intent\n\u2502   \u2502   \u251c\u2500\u2500 useUserProfile.ts   # get user profile\n\u2502   \u2502   \u2514\u2500\u2500 ...\n\u2502   \u251c\u2500\u2500 migrations              # migrations\n\u2502   \u2502   \u251c\u2500\u2500 0-init-app.ts       # initial migration\n\u2502   \u2502   \u2514\u2500\u2500 ...\n\u2502   \u251c\u2500\u2500 webview                 # webview front-end\n\u2502   \u2502   \u251c\u2500\u2500 pages\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 index.tsx       # root webview page\n\u2502   \u2502   \u251c\u2500\u2500 next.config.js      # next.js config\n\u2502   \u2502   \u2514\u2500\u2500 ...\n\u2502   \u251c\u2500\u2500 main.ts                 # control flow of events\n\u2502   \u251c\u2500\u2500 app.ts                  # init platforms, modules and services\n\u2502   \u251c\u2500\u2500 recognitionData.ts      # intent recognition data\n\u2502   \u2514\u2500\u2500 index.ts                # entry point to start server\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 package-lock.json\n\u251c\u2500\u2500 tsconfig.json\n\u251c\u2500\u2500 .env                        # environments file\n\u2514\u2500\u2500 .env.example\n")),(0,i.kt)("h3",{id:"env-configs"},"Env Configs"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},".env")," file contains settings that need to be filled before starting your app.\nYou can check ",(0,i.kt)("inlineCode",{parentName:"p"},".env.example")," for the instructions to set up."),(0,i.kt)("h3",{id:"migrations"},"Migrations"),(0,i.kt)("p",null,"To run the app on the chat platforms,\nyou need to manage resources like the webhook subscriptions.\nThe managing operations are described in migration files under ",(0,i.kt)("inlineCode",{parentName:"p"},"/src/migrations"),"."),(0,i.kt)("p",null,"A migration file might looks like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import { makeContainer } from '@machinat/core';\nimport Messenger from '@machinat/messenger';\n\nexport const up = makeContainer({\n  deps: [Messenger.Bot],\n})(\n  async (messengerBot) => {\n    // create resources...\n    messengerBot.makeApiCall(/* ... */);\n  }\n);\n\nexport const down = makeContainer({\n  deps: [Messenger.Bot],\n})(\n  async (messengerBot) => {\n    // remove resources...\n    messengerBot.makeApiCall(/* ... */);\n  }\n);\n")),(0,i.kt)("p",null,"Every time you develop or deploy on a new environment,\nrun command ",(0,i.kt)("inlineCode",{parentName:"p"},"npm run migrate")," to update the migration jobs.\nIt executes the ",(0,i.kt)("inlineCode",{parentName:"p"},"up")," function to keep the resources up to date."),(0,i.kt)("p",null,"Every migration job is going to be executed once per environment.\nYou can also use the ",(0,i.kt)("inlineCode",{parentName:"p"},"npm run migrate -- --down")," command to revert the migrations.\nIt executes the ",(0,i.kt)("inlineCode",{parentName:"p"},"down")," function to cancel the operations."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"/src/migrations/0-init-app.ts")," file contains the initiating jobs.\nYou can add new operations in it before the app goes into production.\nAfter that, consider adding a new migration file so you can rollback if needed."),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"If your app supports Messenger platform,\nmake sure the server is running while executing the initial migration."))),(0,i.kt)("h3",{id:"start-dev-server"},"Start Dev Server"),(0,i.kt)("p",null,"During development, use the ",(0,i.kt)("inlineCode",{parentName:"p"},"npm run dev")," command to start the server in dev mode.\nThe command do 2 things:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Start a dev server up. It'll automatically refresh when codes change."),(0,i.kt)("li",{parentName:"ol"},"Create a https tunnel connected to a ",(0,i.kt)("em",{parentName:"li"},(0,i.kt)("a",{parentName:"em",href:"https://xxx.t.machinat.dev"},"https://xxx.t.machinat.dev"))," endpoint,\nso your local server can receive webhook requests from the chat platforms.")),(0,i.kt)("p",null,"Try talking to your bot on the chat platform when the server is running.\nA hello-world app should be working if you finish the setup."),(0,i.kt)("h2",{id:"manually-install"},"Manually Install"),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"The rest of this page is for creating your project from scratch.\nYou can skip if you choose to use the creator."))),(0,i.kt)("h3",{id:"core-modules"},"Core Modules"),(0,i.kt)("p",null,"Machinat framework is built in progressive framework paradigm,\nthat you can install the modules you need progressively.\nFirst you need ",(0,i.kt)("inlineCode",{parentName:"p"},"@machinat/core")," and also ",(0,i.kt)("inlineCode",{parentName:"p"},"@machinat/http")," to receive HTTP requests:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npm install @machinat/core @machinat/http\n# or with yarn\nyarn add @machinat/core @machinat/http\n")),(0,i.kt)("p",null,"A simple Machinat app may look like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import Machinat from '@machinat/core';\nimport Http from '@machinat/http';\nimport Messenger from '@machinat/messenger';\n\nconst ENV = process.env;\n\nMachinat.createApp({\n  modules: [\n    Http.initModule({ port: 8080 }),\n  ],\n  platforms: [\n    Messenger.initModule({\n      webhookPath: '/webhook/messenger',\n      pageId: ENV.MESSENGER_PAGE_ID,\n      accessToken: ENV.MESSENGER_ACCESS_TOKEN,\n      appSecret: ENV.MESSENGER_APP_SECRET,\n      verifyToken: ENV.MESSENGER_VERIFY_TOKEN,\n    }),\n  ],\n})\n  .onEvent(async ({ reply, event }) => {\n    await reply(<p>Hello World!</p>);\n  })\n  .start();\n")),(0,i.kt)("h3",{id:"platforms-1"},"Platforms"),(0,i.kt)("p",null,"Platforms modules connect to external sources,\nlike messaging platforms, webviews or any communication channel.\nThe platforms listen to events from users and interact with them.\nThat's how a ",(0,i.kt)("em",{parentName:"p"},"sociable app")," works."),(0,i.kt)("p",null,"Install the platform packages that you like to communicate your users with:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npm install @machinat/messenger @machinat/webview # ...\n# or with yarn\nyarn add @machinat/messenger @machinat/webview # ...\n")),(0,i.kt)("p",null,"For now, Machinat supports the platforms below. Check the readme of the package for the usage guide."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/machinat/machinat/tree/master/packages/messenger"},(0,i.kt)("inlineCode",{parentName:"a"},"@machinat/messenger"))," - receive/send messages as a Facebook page in ",(0,i.kt)("a",{parentName:"li",href:"https://www.messenger.com"},"Messenger"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/machinat/machinat/tree/master/packages/telegram"},(0,i.kt)("inlineCode",{parentName:"a"},"@machinat/telegram"))," - receive/send messages as a Telegram bot."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/machinat/machinat/tree/master/packages/line"},(0,i.kt)("inlineCode",{parentName:"a"},"@machinat/line"))," - receive/send messages as a ",(0,i.kt)("a",{parentName:"li",href:"https://line.me"},"LINE")," official account."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/machinat/machinat/tree/master/packages/webview"},(0,i.kt)("inlineCode",{parentName:"a"},"@machinat/webview"))," - extend embedded webviews on the chat platforms.")),(0,i.kt)("h2",{id:"enabling-jsx"},"Enabling JSX"),(0,i.kt)("p",null,"To enable Machinat JSX syntax, you need to configure the transpiling environment.\nYou can choose either ",(0,i.kt)("a",{parentName:"p",href:"https://babeljs.io/"},"Babel.js")," or ",(0,i.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/"},"TypeScript"),"."),(0,i.kt)("h3",{id:"with-typescript"},"With TypeScript"),(0,i.kt)("p",null,"Add the following ",(0,i.kt)("inlineCode",{parentName:"p"},"compilerOptions")," settings in your ",(0,i.kt)("inlineCode",{parentName:"p"},"tsconfig.json"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'{\n  "compilerOptions": {\n    "jsx": "react",\n    "jsxFactory": "Machinat.createElement",\n    "jsxFragmentFactory": "Machinat.Fragment"\n    // ...\n  }\n}\n')),(0,i.kt)("h3",{id:"with-babel"},"With Babel"),(0,i.kt)("p",null,"Install ",(0,i.kt)("inlineCode",{parentName:"p"},"@machinat/babel-preset")," package:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npm install -D @machinat/babel-preset\n# or using yarn\nyarn add --dev @machinat/babel-preset\n")),(0,i.kt)("p",null,"Then add it into ",(0,i.kt)("inlineCode",{parentName:"p"},"babel.config.js")," like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"module.exports = {\n  presets: [\n    ['@babel/preset-env', {\n      //...\n    }],\n    '@machinat/babel-preset',\n  ],\n};\n")),(0,i.kt)("h3",{id:"import-machinat"},"Import ",(0,i.kt)("inlineCode",{parentName:"h3"},"Machinat")),(0,i.kt)("p",null,"Finally you have to import ",(0,i.kt)("inlineCode",{parentName:"p"},"Machinat")," in the file before using JSX:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import Machinat from '@machinat/core';\n\nconst greeting = <p>Hello World!</p>;\n")),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"In ",(0,i.kt)("inlineCode",{parentName:"p"},"TypeScript"),", the file extension must be ",(0,i.kt)("inlineCode",{parentName:"p"},".tsx")," to enable JSX syntax."))),(0,i.kt)("h2",{id:"listening-to-http"},"Listening to HTTP"),(0,i.kt)("p",null,"Use ",(0,i.kt)("inlineCode",{parentName:"p"},"listenOptions")," of the ",(0,i.kt)("inlineCode",{parentName:"p"},"@machinat/http")," module to configure HTTP server.\nIt take the same options as ",(0,i.kt)("a",{parentName:"p",href:"https://nodejs.org/dist/latest/docs/api/net.html#net_server_listen_options_callback"},(0,i.kt)("inlineCode",{parentName:"a"},"server.listen()")),".\nFor example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"Http.initModule({\n  listenOptions: {\n    host: '::',\n    port: 8080,\n    ipv6Only: true,\n  },  \n})\n")),(0,i.kt)("p",null,"If you have multiple platforms that need a HTTP entry point,\nset the route path for each platform. Like:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"Machinat.createApp({\n  platforms: [\n    Messenger.initModule({\n      webhookPath: '/webhook/messenger',\n      //...\n    }),\n    Telegram.initModule({\n      webhookPath: '/webhook/telegram',\n      //...\n    }),\n  ],\n  //...\n})\n")),(0,i.kt)("p",null,"You can check the ",(0,i.kt)("a",{parentName:"p",href:"pathname:///api"},"API reference")," for the details."),(0,i.kt)("h2",{id:"starting-app"},"Starting App"),(0,i.kt)("p",null,"After all modules are configured, call ",(0,i.kt)("inlineCode",{parentName:"p"},"app.start()")," to run the app. Like:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const app = Machinat.createApp({ ... });\n\napp\n  .start()\n  .then(() => console.log('Your App is Started!'))\n  .catch(err => console.error(err));\n")))}d.isMDXComponent=!0}}]);