"use strict";(self.webpackChunkmachinat_github_io=self.webpackChunkmachinat_github_io||[]).push([[4031],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=p(n),m=o,h=d["".concat(s,".").concat(m)]||d[m]||u[m]||r;return n?a.createElement(h,l(l({ref:t},c),{},{components:n})):a.createElement(h,l({ref:t},c))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,l=new Array(r);l[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var p=2;p<r;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5162:function(e,t,n){n.d(t,{Z:function(){return l}});var a=n(7294),o=n(6010),r="tabItem_Ymn6";function l(e){var t=e.children,n=e.hidden,l=e.className;return a.createElement("div",{role:"tabpanel",className:(0,o.Z)(r,l),hidden:n},t)}},5488:function(e,t,n){n.d(t,{Z:function(){return m}});var a=n(7462),o=n(7294),r=n(6010),l=n(2389),i=n(7392),s=n(7094),p=n(2466),c="tabList__CuJ",u="tabItem_LNqP";function d(e){var t,n,l=e.lazy,d=e.block,m=e.defaultValue,h=e.values,v=e.groupId,k=e.className,b=o.Children.map(e.children,(function(e){if((0,o.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),g=null!=h?h:b.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),f=(0,i.l)(g,(function(e,t){return e.value===t.value}));if(f.length>0)throw new Error('Docusaurus error: Duplicate values "'+f.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var y=null===m?m:null!=(t=null!=m?m:null==(n=b.find((function(e){return e.props.default})))?void 0:n.props.value)?t:b[0].props.value;if(null!==y&&!g.some((function(e){return e.value===y})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+y+'" but none of its children has the corresponding value. Available values are: '+g.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var N=(0,s.U)(),T=N.tabGroupChoices,x=N.setTabGroupChoices,C=(0,o.useState)(y),w=C[0],I=C[1],O=[],E=(0,p.o5)().blockElementScrollPositionUntilNextRender;if(null!=v){var P=T[v];null!=P&&P!==w&&g.some((function(e){return e.value===P}))&&I(P)}var M=function(e){var t=e.currentTarget,n=O.indexOf(t),a=g[n].value;a!==w&&(E(t),I(a),null!=v&&x(v,String(a)))},S=function(e){var t,n=null;switch(e.key){case"ArrowRight":var a,o=O.indexOf(e.currentTarget)+1;n=null!=(a=O[o])?a:O[0];break;case"ArrowLeft":var r,l=O.indexOf(e.currentTarget)-1;n=null!=(r=O[l])?r:O[O.length-1]}null==(t=n)||t.focus()};return o.createElement("div",{className:(0,r.Z)("tabs-container",c)},o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":d},k)},g.map((function(e){var t=e.value,n=e.label,l=e.attributes;return o.createElement("li",(0,a.Z)({role:"tab",tabIndex:w===t?0:-1,"aria-selected":w===t,key:t,ref:function(e){return O.push(e)},onKeyDown:S,onFocus:M,onClick:M},l,{className:(0,r.Z)("tabs__item",u,null==l?void 0:l.className,{"tabs__item--active":w===t})}),null!=n?n:t)}))),l?(0,o.cloneElement)(b.filter((function(e){return e.props.value===w}))[0],{className:"margin-top--md"}):o.createElement("div",{className:"margin-top--md"},b.map((function(e,t){return(0,o.cloneElement)(e,{key:t,hidden:e.props.value!==w})}))))}function m(e){var t=(0,l.Z)();return o.createElement(d,(0,a.Z)({key:String(t)},e))}},4226:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return c},default:function(){return v},frontMatter:function(){return p},metadata:function(){return u},toc:function(){return m}});var a=n(7462),o=n(3366),r=(n(7294),n(3905)),l=n(5488),i=n(5162),s=["components"],p={title:"Native UI and Postback"},c=void 0,u={unversionedId:"learn/native-ui-and-postback",id:"learn/native-ui-and-postback",title:"Native UI and Postback",description:"General UI like ... are supported on every chat platform,",source:"@site/docs/learn/native-ui-and-postback.mdx",sourceDirName:"learn",slug:"/learn/native-ui-and-postback",permalink:"/docs/learn/native-ui-and-postback",draft:!1,editUrl:"https://github.com/machinat/machinat/edit/master/website/docs/learn/native-ui-and-postback.mdx",tags:[],version:"current",frontMatter:{title:"Native UI and Postback"},sidebar:"docs",previous:{title:"Event and Reply",permalink:"/docs/learn/event-and-reply"},next:{title:"UI Component",permalink:"/docs/learn/component"}},d={},m=[{value:"Native Component",id:"native-component",level:2},{value:"JSX Props",id:"jsx-props",level:3},{value:"Postback Event",id:"postback-event",level:2},{value:"Handle Data",id:"handle-data",level:4}],h={toc:m};function v(e){var t=e.components,p=(0,o.Z)(e,s);return(0,r.kt)("wrapper",(0,a.Z)({},h,p,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"General UI like ",(0,r.kt)("inlineCode",{parentName:"p"},"<p>...</p>")," are supported on every chat platform,\nbut you might want to use some special features on the specific platform.\nIn this lesson, we'll learn how to use the native UI to provide richer experiences."),(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("em",{parentName:"p"},"Time to accomplish: 10 minutes"))),(0,r.kt)("h2",{id:"native-component"},"Native Component"),(0,r.kt)("p",null,"On most chat platforms, you can interact with users by widgets or actions.\nIn Machinat, they are available as ",(0,r.kt)("strong",{parentName:"p"},"Native Component")," of each platform."),(0,r.kt)("p",null,"Let's add a button in the message to list user's todos. Follow the\nguide of the platform to edit ",(0,r.kt)("inlineCode",{parentName:"p"},"handleChat"),":"),(0,r.kt)(l.Z,{groupId:"chat-platforms",defaultValue:"messenger",values:[{label:"Messenger",value:"messenger"},{label:"Telegram",value:"telegram"},{label:"LINE",value:"line"}],mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"messenger",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'{2,18-27} title="src/handlers/handleChat.tsx"',"{2,18-27}":!0,title:'"src/handlers/handleChat.tsx"'},"import Machinat, { makeContainer } from '@machinat/core';\nimport * as Messenger from '@machinat/messenger/components';\n// ...\n    async (\n      ctx: ChatEventContext & { event: { category: 'message' | 'postback' } }\n    ) => {\n      const { event, reply } = ctx;\n\n      if (event.type === 'text') {\n        const matchingAddTodo = event.text.match(/add(\\s+todo)?(.*)/i);\n        if (matchingAddTodo) {\n          const todoName = matchingAddTodo[2].trim();\n          return reply(\n            <>\n              <p>Todo \"<b>{todoName}</b>\" is added!</p>\n              <Machinat.Pause time={1500} />\n\n              <Messenger.ButtonTemplate\n                buttons={\n                  <Messenger.PostbackButton\n                    title=\"Show Todos \ud83d\udcd1\"\n                    payload={JSON.stringify({ action: 'list' })}\n                  />\n                }\n              >\n                You have <b>{3}</b> todos now.\n              </Messenger.ButtonTemplate>\n            </>\n          );\n        }\n      }\n// ...\n")),(0,r.kt)("p",null,"The tags like ",(0,r.kt)("inlineCode",{parentName:"p"},"Messenger.ButtonTemplate")," are ",(0,r.kt)("strong",{parentName:"p"},"Native Components"),".\nThey represent special features that belong to the Messenger platform only."),(0,r.kt)("p",null,"We use these Messenger native components above:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Messenger.ButtonTemplate")," - sends a text message with buttons."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Messenger.PostbackButton")," - a button to post the ",(0,r.kt)("inlineCode",{parentName:"li"},"payload")," back."))),(0,r.kt)(i.Z,{value:"telegram",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'{2,18-29} title="src/handlers/handleChat.tsx"',"{2,18-29}":!0,title:'"src/handlers/handleChat.tsx"'},"import Machinat, { makeContainer } from '@machinat/core';\nimport * as Telegram from '@machinat/telegram/components';\n// ...\n    async (\n      ctx: ChatEventContext & { event: { category: 'message' | 'postback' } }\n    ) => {\n      const { event, reply } = ctx;\n\n      if (event.type === 'text') {\n        const matchingAddTodo = event.text.match(/add(\\s+todo)?(.*)/i);\n        if (matchingAddTodo) {\n          const todoName = matchingAddTodo[2].trim();\n          return reply(\n            <>\n              <p>Todo \"<b>{todoName}</b>\" is added!</p>\n              <Machinat.Pause time={1500} />\n\n              <Telegram.Text\n                replyMarkup={\n                  <Telegram.InlineKeyboard>\n                    <Telegram.CallbackButton\n                      text=\"Show Todos \ud83d\udcd1\"\n                      data={JSON.stringify({ action: 'list' })}\n                    />\n                  </Telegram.InlineKeyboard>\n                }\n              >\n                You have <b>{3}</b> todos now.\n              </Telegram.Text>\n            </>\n          );\n        }\n      }\n// ...\n")),(0,r.kt)("p",null,"The tags like ",(0,r.kt)("inlineCode",{parentName:"p"},"Telegram.Text")," are ",(0,r.kt)("strong",{parentName:"p"},"Native Components"),".\nThey represent special features that belong to the Telegram platform only."),(0,r.kt)("p",null,"We use these Telegram native components above:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Telegram.Text")," - sends a text message with more options."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Telegram.InlineKeyboard")," - attach inline buttons below a message."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Telegram.CallbackButton")," - a button to post the ",(0,r.kt)("inlineCode",{parentName:"li"},"data")," back."))),(0,r.kt)(i.Z,{value:"line",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'{2,18-28} title="src/handlers/handleChat.tsx"',"{2,18-28}":!0,title:'"src/handlers/handleChat.tsx"'},"import Machinat, { makeContainer } from '@machinat/core';\nimport * as Line from '@machinat/line/components';\n//...\n  async (\n    ctx: ChatEventContext & { event: { category: 'message' | 'postback' } }\n  ) => {\n    const { event, reply } = ctx;\n\n    if (event.type === 'text') {\n      const matchingAddTodo = event.text.match(/add(\\s+todo)?(.*)/i);\n      if (matchingAddTodo) {\n        const todoName = matchingAddTodo[2].trim();\n        return reply(\n          <>\n            <p>Todo \"<b>{todoName}</b>\" is added!</p>\n            <Machinat.Pause time={1500} />\n\n            <Line.ButtonTemplate\n              altText=\"You have 3 todos now.\"\n              actions={\n                <Line.PostbackAction\n                  label=\"Show Todos \ud83d\udcd1\"\n                  data={JSON.stringify({ action: 'list' })}\n                />\n              }\n            >\n              You have <b>{3}</b> todos now.\n            </Line.ButtonTemplate>\n          </>\n        );\n      }\n    }\n// ...\n")),(0,r.kt)("p",null,"The tags like ",(0,r.kt)("inlineCode",{parentName:"p"},"Line.ButtonTemplate")," are ",(0,r.kt)("strong",{parentName:"p"},"Native Components"),".\nThey represent special features that belong to the LINE platform only."),(0,r.kt)("p",null,"We use these LINE native components above:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Line.ButtonTemplate")," - sends a text message with buttons."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Line.PostbackAction")," - a button to post the ",(0,r.kt)("inlineCode",{parentName:"li"},"data")," back.")))),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"If you are building a cross-platform app, reply according to the platform like:"),(0,r.kt)("pre",{parentName:"div"},(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"{6-14}","{6-14}":!0},"//...\n    <>\n      <p>Todo \"<b>{todoName}</b>\" is added!</p>\n      <Machinat.Pause time={1500} />\n\n      {\n        event.platform === 'messenger' ? (\n          // messenger component\n        ) : event.platform === 'telegram' ? (\n          // telegram component\n        ) : (\n          <p>You have <b>{3}</b> todos now.</p>\n        )\n      }\n    </>\n//...\n")))),(0,r.kt)("p",null,"Now a button should be attached on the replied message, like:"),(0,r.kt)("img",{width:400,src:n(797).Z}),(0,r.kt)("h3",{id:"jsx-props"},"JSX Props"),(0,r.kt)("p",null,"The attributes we put on the JSX element are ",(0,r.kt)("strong",{parentName:"p"},"Props"),". For\nexample:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"{2,4-5}","{2,4-5}":!0},"    <Messenger.ButtonTemplate\n      buttons={\n        <Messenger.PostbackButton\n          title=\"Show Todos \ud83d\udcd1\"\n          payload={JSON.stringify({ action: 'list' })}\n        />\n      }\n    >\n      You have <b>{3}</b> todos now.\n    </Messenger.ButtonTemplate>\n")),(0,r.kt)("p",null,"Props are used to pass values to the component. The value can be text (like ",(0,r.kt)("inlineCode",{parentName:"p"},"title"),"),\nexpression (like ",(0,r.kt)("inlineCode",{parentName:"p"},"payload"),") or even another JSX element (like ",(0,r.kt)("inlineCode",{parentName:"p"},"buttons"),")."),(0,r.kt)("p",null,"The JSON encoded data ",(0,r.kt)("inlineCode",{parentName:"p"},"{ action: 'list' }")," is set on the button.\nWe can use the data later to handle the postback event."),(0,r.kt)("h2",{id:"postback-event"},"Postback Event"),(0,r.kt)("p",null,"When the user taps the button, it triggers an event that posts the data back.\nWe can handle it by adding these codes in ",(0,r.kt)("inlineCode",{parentName:"p"},"handleChat"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'{7-16} title="src/handlers/handleChat.tsx"',"{7-16}":!0,title:'"src/handlers/handleChat.tsx"'},"//...\n  (getIntent, getUserProfile) =>\n    async (\n      ctx: ChatEventContext & { event: { category: 'message' | 'postback' } }\n    ) => {\n      const { event, reply } = ctx;\n      const intent = await getIntent(event);\n\n      if (intent.type === 'list') {\n        return reply(\n          <>\n            <p>You have <b>3</b> todos:</p>\n            <p>......</p>\n          </>\n        );\n      }\n//...\n")),(0,r.kt)("p",null,"Try tapping the ",(0,r.kt)("inlineCode",{parentName:"p"},"Show Todos \ud83d\udcd1")," button and you should see:"),(0,r.kt)("img",{width:400,src:n(3177).Z}),(0,r.kt)("h4",{id:"handle-data"},"Handle Data"),(0,r.kt)("p",null,"To know what happen in the ",(0,r.kt)("inlineCode",{parentName:"p"},"getIntent")," function,\ncheck the ",(0,r.kt)("inlineCode",{parentName:"p"},"src/services/useIntent.ts")," file and you'll see the following code:"),(0,r.kt)(l.Z,{groupId:"chat-platforms",defaultValue:"messenger",values:[{label:"Messenger",value:"messenger"},{label:"Telegram",value:"telegram"},{label:"LINE",value:"line"}],mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"messenger",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/services/useIntent.ts"',title:'"src/services/useIntent.ts"'},"//...\nif (\n  event.platform === 'messenger' &&\n    (event.type === 'quick_reply' || event.type === 'postback')\n) {\n  if (event.data) {\n    const { action, ...payload } = JSON.parse(event.data);\n    return {\n      type: action,\n      confidence: 1,\n      payload,\n    };\n  }\n}\n//...\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"'postback'")," event contains the data ",(0,r.kt)("inlineCode",{parentName:"p"},"{ action: 'list' }")," we attached on the button.\nWe can get the data at ",(0,r.kt)("inlineCode",{parentName:"p"},"event.data")," and reply according to it.")),(0,r.kt)(i.Z,{value:"telegram",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/services/useIntent.ts"',title:'"src/services/useIntent.ts"'},"//...\nif (event.platform === 'telegram' && event.type === 'callback_query') {\n  if (event.data) {\n    const { action, ...payload } = JSON.parse(event.data);\n    return {\n      type: action,\n      confidence: 1,\n      payload,\n    };\n  }\n}\n//...\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"'callback_query'")," event contains the data ",(0,r.kt)("inlineCode",{parentName:"p"},"{ action: 'list' }")," we attached on the button.\nWe can get the data at ",(0,r.kt)("inlineCode",{parentName:"p"},"event.data")," and reply according to it.")),(0,r.kt)(i.Z,{value:"line",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/services/useIntent.ts"',title:'"src/services/useIntent.ts"'},"//...\nif (event.platform === 'line' && event.type === 'postback') {\n  if (event.data) {\n    const { action, ...payload } = JSON.parse(event.data);\n    return {\n      type: action,\n      confidence: 1,\n      payload,\n    };\n  }\n}\n//...\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"'postback'")," event contains the data ",(0,r.kt)("inlineCode",{parentName:"p"},"{ action: 'list' }")," we attached on the button.\nWe can get the data at ",(0,r.kt)("inlineCode",{parentName:"p"},"event.data")," and reply according to it."))),(0,r.kt)("hr",null),(0,r.kt)("p",null,"Our bot can interact with users using buttons and postback.\nNext, we'll learn how to make a reusable UI with a ",(0,r.kt)("strong",{parentName:"p"},"component"),"."))}v.isMDXComponent=!0},797:function(e,t,n){t.Z=n.p+"assets/images/add-todo-with-list-button-b425a9d7f6b2f69f16b8aac1d1fdc6bb.png"},3177:function(e,t,n){t.Z=n.p+"assets/images/list-todo-1-931a01c072616b3f670a3c93ff10b8cb.png"}}]);