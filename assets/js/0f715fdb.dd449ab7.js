"use strict";(self.webpackChunkmachinat_github_io=self.webpackChunkmachinat_github_io||[]).push([[2844],{3905:function(e,t,n){n.d(t,{Zo:function(){return m},kt:function(){return u}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,l=e.originalType,p=e.parentName,m=r(e,["components","mdxType","originalType","parentName"]),d=s(n),u=i,h=d["".concat(p,".").concat(u)]||d[u]||c[u]||l;return n?a.createElement(h,o(o({ref:t},m),{},{components:n})):a.createElement(h,o({ref:t},m))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=n.length,o=new Array(l);o[0]=d;var r={};for(var p in t)hasOwnProperty.call(t,p)&&(r[p]=t[p]);r.originalType=e,r.mdxType="string"==typeof e?e:i,o[1]=r;for(var s=2;s<l;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},478:function(e,t,n){n.r(t),n.d(t,{assets:function(){return m},contentTitle:function(){return p},default:function(){return u},frontMatter:function(){return r},metadata:function(){return s},toc:function(){return c}});var a=n(7462),i=n(3366),l=(n(7294),n(3905)),o=["components"],r={title:"Embedded Webview"},p=void 0,s={unversionedId:"embedded-webview",id:"embedded-webview",title:"Embedded Webview",description:"This document assumes you know the basic usage of Next.js and React.js.",source:"@site/docs/embedded-webview.md",sourceDirName:".",slug:"/embedded-webview",permalink:"/docs/embedded-webview",draft:!1,editUrl:"https://github.com/machinat/machinat/edit/master/website/docs/embedded-webview.md",tags:[],version:"current",frontMatter:{title:"Embedded Webview"},sidebar:"docs",previous:{title:"Dialog Script",permalink:"/docs/dialog-script"},next:{title:"Reactive Programming",permalink:"/docs/reactive-programming"}},m={},c=[{value:"Webview Platform",id:"webview-platform",level:2},{value:"Install With Creator",id:"install-with-creator",level:2},{value:"Open the Webview",id:"open-the-webview",level:2},{value:"Determine the <code>platform</code>",id:"determine-the-platform",level:3},{value:"Webview Client",id:"webview-client",level:2},{value:"<code>useClient</code> Hook",id:"useclient-hook",level:3},{value:"Receive Events from Server",id:"receive-events-from-server",level:3},{value:"<code>connect</code> and <code>disconnect</code>",id:"connect-and-disconnect",level:3},{value:"Send Event on Client-Side",id:"send-event-on-client-side",level:3},{value:"<code>useEventReducer</code> Hook",id:"useeventreducer-hook",level:3},{value:"Webview Platform",id:"webview-platform-1",level:2},{value:"Receive Events from Clients",id:"receive-events-from-clients",level:3},{value:"Send Event to the Client",id:"send-event-to-the-client",level:3},{value:"Broadcast by a Topic",id:"broadcast-by-a-topic",level:3},{value:"Interact With Chat",id:"interact-with-chat",level:3},{value:"Send Messages to Chat",id:"send-messages-to-chat",level:4},{value:"Manually Install",id:"manually-install",level:2},{value:"Create Web App",id:"create-web-app",level:3},{value:"Server-Side Setup",id:"server-side-setup",level:3},{value:"<code>authPlatforms</code> on Server",id:"authplatforms-on-server",level:3},{value:"Client-Side Setup",id:"client-side-setup",level:3},{value:"<code>authPlatforms</code> on Client",id:"authplatforms-on-client",level:3},{value:"Get Settings from Server",id:"get-settings-from-server",level:3}],d={toc:c};function u(e){var t=e.components,n=(0,i.Z)(e,o);return(0,l.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"This document assumes you know the basic usage of ",(0,l.kt)("em",{parentName:"p"},"Next.js")," and ",(0,l.kt)("em",{parentName:"p"},"React.js"),".\nYou can learn more about them here:"),(0,l.kt)("ul",{parentName:"div"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://reactjs.org/docs/getting-started.html"},"React.js")," - A JavaScript library for building user interfaces."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://nextjs.org/docs/getting-started"},"Next.js")," - The React Framework for Production.")))),(0,l.kt)("p",null,"Chat UI brings a new way to communicate with users,\nbut it cannot totally replace GUI.\nFor the features that require precise control, instant interactions and richer displays, GUI is still a better choice."),(0,l.kt)("p",null,"The best practice we suggest is a hybrid experience that combines the advantages of both.\nWhile a chatbot is easier to access,\nwe can extend a webview to ship more amazing features in GUI."),(0,l.kt)("h2",{id:"webview-platform"},"Webview Platform"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"@machinat/webview")," platform serves embedded webviews in the chat.\nIt does these three things in the background:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Host a web app with ",(0,l.kt)("a",{parentName:"li",href:"https://nextjs.org"},"Next.js"),"."),(0,l.kt)("li",{parentName:"ol"},"Log in users with their chat platforms account."),(0,l.kt)("li",{parentName:"ol"},"Connect a ",(0,l.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API"},"WebSocket")," to communicate with the server.")),(0,l.kt)("h2",{id:"install-with-creator"},"Install With Creator"),(0,l.kt)("p",null,"If you are creating a new project with our app creator,\nadd a ",(0,l.kt)("inlineCode",{parentName:"p"},"--webview")," flag and everything will be set up.\nLike this:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"npm init @machinat/app@latest -- -p telegram --webview my-project\n")),(0,l.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"Check ",(0,l.kt)("a",{parentName:"p",href:"#manually-install"},"Manually Install")," section for step-by-step setup guide."))),(0,l.kt)("h2",{id:"open-the-webview"},"Open the Webview"),(0,l.kt)("p",null,"The chat platforms may provide some special components to open the webview in the chatroom.\nFor example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"import * as Messenger from '@machinat/messenger/components';\nimport { WebviewButton as MessengerWebviewButton } from '@machinat/messenger/webview';\n\n<Messenger.ButtonTemplate\n  buttons={\n    // highlight-start\n    <MessengerWebviewButton title=\"Open Webview \u2197\ufe0f\" />\n    // highlight-end\n  }\n>\n  Hello World!\n</Messenger.ButtonTemplate>\n")),(0,l.kt)("p",null,"With the codes above, the webview will be opened in the Messenger app when the ",(0,l.kt)("inlineCode",{parentName:"p"},"WebviewButton")," is tapped.\nCheck the document of each platform for the details."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"./messenger-platform#open-the-webview"},"Messenger")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"./twitter-platform#open-the-webview"},"Twitter")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"./telegram-platform#open-the-webview"},"Telegram")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"./line-platform#open-the-webview"},"LINE"))),(0,l.kt)("h3",{id:"determine-the-platform"},"Determine the ",(0,l.kt)("inlineCode",{parentName:"h3"},"platform")),(0,l.kt)("p",null,"Sometimes you might want to decide which platform to log in,\nfor example, when a user opens the web page in the browser directly.\nIt's determined in this order:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"The ",(0,l.kt)("inlineCode",{parentName:"li"},"platform")," option while constructing ",(0,l.kt)("inlineCode",{parentName:"li"},"WebviewClient"),". For example:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const client = new WebviewClient({\n  platform: 'line',\n  // ...\n});\n")),(0,l.kt)("ol",{start:2},(0,l.kt)("li",{parentName:"ol"},"The ",(0,l.kt)("inlineCode",{parentName:"li"},"platform")," querystring param on the URL. Like:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"https://my.machinat.app/webview?platform=messenger\n")),(0,l.kt)("ol",{start:3},(0,l.kt)("li",{parentName:"ol"},"The platform that already logged in.")),(0,l.kt)("p",null,"Notice that some platforms only support opening webviews from the chatroom,\nlike Messenger."),(0,l.kt)("h2",{id:"webview-client"},"Webview Client"),(0,l.kt)("p",null,"In the front-end, the ",(0,l.kt)("inlineCode",{parentName:"p"},"WebviewClient")," handles the login flow and the communication to the server.\nIt can be constructed like this:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"import WebviewClient from '@machinat/webview/client';\nimport MessengerAuth from '@machinat/messenger/webview/client';\n\nconst client = new WebviewClient({\n  authPlatforms: [MessengerAuth],\n});\n")),(0,l.kt)("p",null,"You have to add the chat platforms to log in with at ",(0,l.kt)("inlineCode",{parentName:"p"},"authPlatforms"),".\nThe client will sign in the user and connect to the server after constructed."),(0,l.kt)("h3",{id:"useclient-hook"},(0,l.kt)("inlineCode",{parentName:"h3"},"useClient")," Hook"),(0,l.kt)("p",null,"If you are using React.js in front-end,\nuse the ",(0,l.kt)("inlineCode",{parentName:"p"},"useClient")," hook to create a client in the lifetime of a component.\nLike this:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"import { useClient } from '@machinat/webview/client';\nimport MessengerAuth from '@machinat/messenger/webview/client';\n\nexport default function MyApp() {\n  const client = useClient({\n    authPlatforms: [MessengerAuth],\n  });\n\n  const sayHello = () => {\n    client.send({ type: 'hello', payload: 'world' });\n  };\n\n  return (\n    <div>\n      <h1>Hello World</h1>\n      <button onClick={sayHello}>hello</button>\n    </div>\n  );\n}\n")),(0,l.kt)("h3",{id:"receive-events-from-server"},"Receive Events from Server"),(0,l.kt)("p",null,"On the client-side, you can use ",(0,l.kt)("inlineCode",{parentName:"p"},"client.onEvent(listener)")," to subscribe events from the server.\nLike this:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"client.onEvent(({ event }) => {\n  if (event.type === 'connect') {\n    // handle connect\n  } else if (event.type === 'app_data') {\n    // handle app data\n  }\n});\n")),(0,l.kt)("p",null,"The listener receive an event context object with following info:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"event")," - ",(0,l.kt)("inlineCode",{parentName:"p"},"object"),", event object."),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"platform")," - ",(0,l.kt)("inlineCode",{parentName:"li"},"'webview'"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"category")," - ",(0,l.kt)("inlineCode",{parentName:"li"},"string"),", event category."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"type")," - ",(0,l.kt)("inlineCode",{parentName:"li"},"string"),", event type."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"user")," - ",(0,l.kt)("inlineCode",{parentName:"li"},"object"),", the logged-in user"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"channel")," - ",(0,l.kt)("inlineCode",{parentName:"li"},"object"),", the connection to the server."))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"auth")," - ",(0,l.kt)("inlineCode",{parentName:"p"},"object"),", auth info."),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"platform")," - ",(0,l.kt)("inlineCode",{parentName:"li"},"string"),", authenticating platform."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"user")," - ",(0,l.kt)("inlineCode",{parentName:"li"},"object"),", the logged-in user."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"channel")," - ",(0,l.kt)("inlineCode",{parentName:"li"},"object"),", the chat where the user comes from."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"loginAt")," - ",(0,l.kt)("inlineCode",{parentName:"li"},"Date"),", the logged-in time."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"expireAt")," - ",(0,l.kt)("inlineCode",{parentName:"li"},"Date"),", the time when authorization expires."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"data")," - ",(0,l.kt)("inlineCode",{parentName:"li"},"any"),", raw auth data from chat platform."))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"authenticator")," - ",(0,l.kt)("inlineCode",{parentName:"p"},"object"),", the authenticator instance of the authenticated platform."))),(0,l.kt)("h3",{id:"connect-and-disconnect"},(0,l.kt)("inlineCode",{parentName:"h3"},"connect")," and ",(0,l.kt)("inlineCode",{parentName:"h3"},"disconnect")),(0,l.kt)("p",null,"Two system events will be received when the connection status is changed:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"connect")," - received when the connection is connected."),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"category")," - ",(0,l.kt)("inlineCode",{parentName:"li"},"'connection'"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"type")," - ",(0,l.kt)("inlineCode",{parentName:"li"},"'connect'"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"payload")," - ",(0,l.kt)("inlineCode",{parentName:"li"},"null"),"."))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"disconnect")," - received when the connection is disconnected."),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"category")," - ",(0,l.kt)("inlineCode",{parentName:"li"},"'connection'"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"type")," - ",(0,l.kt)("inlineCode",{parentName:"li"},"'disconnect'"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"payload")," - ",(0,l.kt)("inlineCode",{parentName:"li"},"object"),".",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"reason")," - ",(0,l.kt)("inlineCode",{parentName:"li"},"undefined | string"),", reason for disconnect.")))))),(0,l.kt)("h3",{id:"send-event-on-client-side"},"Send Event on Client-Side"),(0,l.kt)("p",null,"Use ",(0,l.kt)("inlineCode",{parentName:"p"},"client.send(eventObj)")," method to send an event to the server.\nFor example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"client.send({\n  type: 'greeting',\n  payload : '\ud83d\udc4b',\n});\n")),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"eventObj")," take these properties:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"category")," - optional, ",(0,l.kt)("inlineCode",{parentName:"li"},"string"),", set to ",(0,l.kt)("inlineCode",{parentName:"li"},"'default'")," if not specified."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"type")," - required, ",(0,l.kt)("inlineCode",{parentName:"li"},"string"),", the event type."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"payload")," - optional, ",(0,l.kt)("inlineCode",{parentName:"li"},"any"),", the value will be serialized and sent to the server.")),(0,l.kt)("p",null,"You don't have to wait for ",(0,l.kt)("inlineCode",{parentName:"p"},"'connect'")," to send events.\nThe events sent before it are queued and delivered after it's connected."),(0,l.kt)("h3",{id:"useeventreducer-hook"},(0,l.kt)("inlineCode",{parentName:"h3"},"useEventReducer")," Hook"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"useEventReducer")," hook provides a convenient way to handle events in a React component (e.g. a Next.js page).\nFor example, an app can display data from the server like this:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"import WebviewClient, { useEventReducer } from '@machinat/webview/client';\n// ...\n\nexport default function Home() {\n  const { color, content } = useEventReducer(\n    client,\n    (data, { event }) => {\n      if (event.type === 'app_data') {\n        return event.payload;\n      }\n      if (event.type === 'color_updated') {\n        return { ...data, color: event.payload.color };\n      }\n      return data;\n    },\n    { color: '#000', content: 'loading...' }\n  );\n\n  return (\n    <main>\n      <input\n        type=\"color\"\n        value={color}\n        onChange={(e) =>\n          client.send({\n            type: 'update_color',\n            payload: { color: e.target.value },\n          })\n        }\n      />\n      <div style={{ textColor: color }}>Content: {content}</div>\n    </main>\n  );\n}\n")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"useEventReducer(client, reducer, initialState)")," takes a reducer function of type ",(0,l.kt)("inlineCode",{parentName:"p"},"(state, eventContext) => newState"),".\nEverytime an event is received, the reducer is called to update the new state.\nIt's useful to maintain the ",(0,l.kt)("em",{parentName:"p"},"real-time")," app data."),(0,l.kt)("h2",{id:"webview-platform-1"},"Webview Platform"),(0,l.kt)("p",null,"On the server side, the ",(0,l.kt)("inlineCode",{parentName:"p"},"@machinat/webview")," platform need to be registered in your app.\nLike this:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"import Machinat from '@machinat/core';\nimport Http from '@machinat/http';\nimport Webview from '@machinat/webview';\nimport TelegramAuth from '@machinat/telegram/webview';\nimport nextConfig from '../webview/next.config.js';\n\nconst app = Machinat.createApp({\n  modules: [\n    Http.initModule({/* ... */}),\n  ],\n  platforms: [\n    Webview.initModule({\n      webviewHost: 'your.domain.com',\n      authSecret: '_secret_string_to_sign_token_',\n      authPlatforms: [TelegramAuth],\n      nextServerOptions: {\n        dev: process.env.NODE_ENV !== 'production',\n        dir: `./webview`,\n        conf: nextConfig,\n      },\n    }),\n  ],\n});\n")),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"authPlatforms")," should correspond to the client settings.\nAdd the auth providers from all the platforms that requires webviews.\nMore options can be found ",(0,l.kt)("a",{parentName:"p",href:"pathname:///api/modules/webview.html#webviewconfigs"},"here"),"."),(0,l.kt)("h3",{id:"receive-events-from-clients"},"Receive Events from Clients"),(0,l.kt)("p",null,"On the server-side, events from the client are received as ordinary event context.\nFor example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"app.onEvent(async ({ platform, event, bot }) => {\n  if (platform === 'webview') {\n    if (event.type === 'connect') {\n      const { color } = await getUserState(event.user);\n\n      return bot.send(event.channel, {\n        type: 'app_data',\n        payload : { color, content: 'Hello Webview' },\n      });\n    }\n    \n    if (event.type === 'update_color') {\n      await updateUserState(event.user, event.payload.color);\n\n      return bot.send(event.channel, {\n        type: 'color_updated',\n        payload: { color: event.payload },\n      });\n    }\n  }\n});\n")),(0,l.kt)("p",null,"The webview event context contains the following info:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"platform")," - ",(0,l.kt)("inlineCode",{parentName:"p"},"'webview'"),".")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"bot")," - ",(0,l.kt)("inlineCode",{parentName:"p"},"object"),", the webview bot.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"event")," - ",(0,l.kt)("inlineCode",{parentName:"p"},"object"),", event object."),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"platform")," - ",(0,l.kt)("inlineCode",{parentName:"li"},"'webview'"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"category")," - ",(0,l.kt)("inlineCode",{parentName:"li"},"string"),", event category."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"type")," - ",(0,l.kt)("inlineCode",{parentName:"li"},"string"),", event type."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"user")," - ",(0,l.kt)("inlineCode",{parentName:"li"},"object"),", the logged-in user."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"channel")," - ",(0,l.kt)("inlineCode",{parentName:"li"},"object"),", the connection to the client."))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"metadata")," - ",(0,l.kt)("inlineCode",{parentName:"p"},"object"),", meta info about the connection."),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"source")," - ",(0,l.kt)("inlineCode",{parentName:"li"},"'websocket'"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"request")," - ",(0,l.kt)("inlineCode",{parentName:"li"},"object"),", http upgrade request info."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"connection")," - ",(0,l.kt)("inlineCode",{parentName:"li"},"object"),", identical to ",(0,l.kt)("inlineCode",{parentName:"li"},"event.channel"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"auth")," - ",(0,l.kt)("inlineCode",{parentName:"li"},"object"),", auth info, identical to ",(0,l.kt)("inlineCode",{parentName:"li"},"context.auth")," in client-side.",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"platform")," - ",(0,l.kt)("inlineCode",{parentName:"li"},"string"),", authenticating platform."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"user")," - ",(0,l.kt)("inlineCode",{parentName:"li"},"object"),", the logged-in user."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"channel")," - ",(0,l.kt)("inlineCode",{parentName:"li"},"object"),", the chat where the user comes from."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"loginAt")," - ",(0,l.kt)("inlineCode",{parentName:"li"},"Date"),", the logged-in time."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"expireAt")," - ",(0,l.kt)("inlineCode",{parentName:"li"},"Date"),", the time when authorization expires."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"data")," - ",(0,l.kt)("inlineCode",{parentName:"li"},"any"),", raw auth data from chat platform.")))))),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"'connect'")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"'disconnect'")," events are emitted on server-side too when the status of a connection has changed."),(0,l.kt)("h3",{id:"send-event-to-the-client"},"Send Event to the Client"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"bot.send(connection, eventObj)")," method sends an event back to the client.\nIt takes the same event object as ",(0,l.kt)("inlineCode",{parentName:"p"},"client.send(eventObj)"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"await bot.send(event.channel, {\n  category: 'event_category',\n  type: 'event_type',\n  payload: { some: 'serializable content' }\n});\n")),(0,l.kt)("p",null,"Note that the sending promise sometimes resolves even if the delivery fails (e.g. client is offline).\nYou can tell whether it succeed like this:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const result = await bot.send(event.channel, {\n  type: 'foo',\n  payload: 'bar',\n});\nif (result.connections.length === 0) {\n  console.log('sending is not completed');\n}\n")),(0,l.kt)("h3",{id:"broadcast-by-a-topic"},"Broadcast by a Topic"),(0,l.kt)("p",null,"In some cases you might need to broadcast an event to many connections.\nFor example, to make a multi-players game."),(0,l.kt)("p",null,"A connection can subscribe to a topic with ",(0,l.kt)("inlineCode",{parentName:"p"},"bot.subscribeTopic"),".\nLike:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"await bot.subscribeTopic(event.channel, 'topicName');\n")),(0,l.kt)("p",null,"Then you can send events to all the connections that subscribe to a topic with ",(0,l.kt)("inlineCode",{parentName:"p"},"bot.sendTopic"),".\nLike:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const result = await bot.sendTopic('topicName', {\n  type: 'game_start',\n  payload: { game: 'data' },\n});\n")),(0,l.kt)("p",null,"To put them together, this example let users say hello on a global topic:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"app.onEvent(async ({ event, bot }) => {  \n  if (event.type === 'connect') {\n    return bot.subscribeTopic(event.channel, 'world');\n  }\n  \n  if (event.type === 'hello') {\n    const result = await bot.sendTopic('world', {\n      type: 'hello',\n      payload: event.payload,\n    });\n\n    console.log(`hello to ${result.connections.length} connections`);\n  }\n});\n")),(0,l.kt)("p",null,"To unsubscribe a topic, use ",(0,l.kt)("inlineCode",{parentName:"p"},"bot.unsubscribeTopic")," like:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"await bot.unsubscribeTopic(event.channel, 'topicName');\n")),(0,l.kt)("h3",{id:"interact-with-chat"},"Interact With Chat"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"metadata.auth.channel")," refers to the chatroom where the user comes from.\nYou can use it to provide features that extend the chatting experience."),(0,l.kt)("p",null,"With webviews, the bot can ship any features you can do in a web app.\nOne common usage is filling complicated input in the webview,\nlike selecting a location on the map."),(0,l.kt)("h4",{id:"send-messages-to-chat"},"Send Messages to Chat"),(0,l.kt)("p",null,"To send messages back to the original chatroom,\nyou can use ",(0,l.kt)("inlineCode",{parentName:"p"},"BasicBot")," service like:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"import Machinat, { BasicBot } from '@machinat/core';\n\napp.onEvent(\n  makeContainer({ deps: [BasicBot] })(\n    (basicBot) =>\n    async ({ platform, metadata, event }) => {\n      if (platform === 'webview' && event.type === 'connect') {\n        await basicBot.render(\n          metadata.auth.channel,\n          <p>I see you on the webview!</p>\n        );\n      }\n    }\n  )\n);\n")),(0,l.kt)("h2",{id:"manually-install"},"Manually Install"),(0,l.kt)("p",null,"First install the following packages:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"npm install react react-dom next @machinat/webview\n")),(0,l.kt)("h3",{id:"create-web-app"},"Create Web App"),(0,l.kt)("p",null,"Next you need a Next.js app to host the webview.\nYou can create one with:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"npx create-next-app@latest webview\n")),(0,l.kt)("p",null,"Check ",(0,l.kt)("a",{parentName:"p",href:"https://nextjs.org/docs/getting-started"},"Next.js document")," for more details."),(0,l.kt)("h3",{id:"server-side-setup"},"Server-Side Setup"),(0,l.kt)("p",null,"Then register the ",(0,l.kt)("inlineCode",{parentName:"p"},"@machinat/webview")," platform to your app like this:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"// src/app.js\nimport Machinat from '@machinat/core';\nimport Http from '@machinat/http';\nimport Webview from '@machinat/webview';\nimport Telegram from '@machinat/telegram';\nimport TelegramAuth from '@machinat/telegram/webview';\nimport nextConfig from '../webview/next.config.js';\n\nconst app = Machinat.createApp({\n  modules: [\n    // http module must be installed\n    Http.initModule({\n      listenOptions: { port: 8080 },\n    }),\n  ],\n  platforms: [\n    Webview.initModule({\n      // hostname of your server\n      webviewHost: 'xxx.machinat.com',\n      // secret string for siging auth token\n      authSecret: '_some_secret_string_',\n      // authenticators from chat platforms\n      authPlatforms: [\n        TelegramAuth,\n      ],\n      // Next.js server options\n      nextServerOptions: {\n        // to start server in dev mode or not\n        dev: process.env.NODE_ENV !== 'production',\n        // Next.js directory from project root\n        dir: `./webview`,\n        // require configs from next.config.js\n        conf: nextConfig,\n      },\n    }),\n    Telegram.initModule({/* ... */}),\n  ],\n});\n")),(0,l.kt)("p",null,"The webview page should be available at ",(0,l.kt)("inlineCode",{parentName:"p"},"/")," of your server now.\nYou can check more platform options ",(0,l.kt)("a",{parentName:"p",href:"pathname:///api/modules/webview.html#webviewconfigs"},"here"),"."),(0,l.kt)("h3",{id:"authplatforms-on-server"},(0,l.kt)("inlineCode",{parentName:"h3"},"authPlatforms")," on Server"),(0,l.kt)("p",null,"To integrate with the chatroom,\nyou have to add the supported ",(0,l.kt)("inlineCode",{parentName:"p"},"authPlatforms")," to log in users.\nConventionally, the providers are available at ",(0,l.kt)("inlineCode",{parentName:"p"},"@machinat/<platform>/webview"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"import MessengerAuth from '@machinat/messenger/webview';\nimport TelegramAuth from '@machinat/telegram/webview';\nimport LineAuth from '@machinat/line/webview';\n// ...\n  Webview.initModule({\n    authPlatforms: [\n      MessengerAuth,\n      TelegramAuth,\n      LineAuth,\n    ],\n    // ...\n  }),\n")),(0,l.kt)("h3",{id:"client-side-setup"},"Client-Side Setup"),(0,l.kt)("p",null,"At the client-side,\nwe can connect to the server using ",(0,l.kt)("inlineCode",{parentName:"p"},"WebviewClient"),".\nFor example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"// webview/pages/index.js\nimport WebviewClient from '@machinat/webview/client';\nimport TelegramAuth from '@machinat/telegram/webview/client';\n\nconst client = new WebviewClient({\n  // prevent connections while rendering on server-side\n  mockupMode: typeof window === 'undefined',\n  // authenticators from chat platforms\n  authPlatforms: [\n    new TelegramAuth(),\n  ],\n});\n\nclient.onError(console.error);\n")),(0,l.kt)("p",null,"After the ",(0,l.kt)("inlineCode",{parentName:"p"},"client")," is constructed, it'll do these two thing automatically:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Log in user to the selected chat platform ."),(0,l.kt)("li",{parentName:"ol"},"Opens a ",(0,l.kt)("inlineCode",{parentName:"li"},"WebSocket")," connection to the server.")),(0,l.kt)("p",null,"You can check more client options ",(0,l.kt)("a",{parentName:"p",href:"pathname:///api/modules/webview_client.html#clientoptions"},"here"),"."),(0,l.kt)("h3",{id:"authplatforms-on-client"},(0,l.kt)("inlineCode",{parentName:"h3"},"authPlatforms")," on Client"),(0,l.kt)("p",null,"The supported ",(0,l.kt)("inlineCode",{parentName:"p"},"authPlatforms")," also need to be added at the client.\nCheck the guide of each platform for the details."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"./messenger-platform#auth-setup"},"Messenger")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"./twitter-platform#auth-setup"},"Twitter")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"./telegram-platform#auth-setup"},"Telegram")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"./line-platform#auth-setup"},"LINE"))),(0,l.kt)("h3",{id:"get-settings-from-server"},"Get Settings from Server"),(0,l.kt)("p",null,"If an authenticator require settings from server-side,\nuse ",(0,l.kt)("a",{parentName:"p",href:"https://nextjs.org/docs/api-reference/next.config.js/runtime-configuration"},(0,l.kt)("inlineCode",{parentName:"a"},"publicRuntimeConfig"))," to pass it to the client.\nFor example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"import MessengerAuth from '@machinat/messenger/webview/client';\n\n// to activate publicRuntimeConfig\nexport const getServerSideProps = () => ({ props: {} });\n// get runtime settings\nconst { publicRuntimeConfig } = getConfig();\n\nconst client = new WebviewClient({\n  authPlatforms: [\n    new MessengerAuth({\n      appId: publicRuntimeConfig.messengerAppId,\n    }),\n  ],\n});\n")),(0,l.kt)("p",null,"Then add the setting in ",(0,l.kt)("inlineCode",{parentName:"p"},"next.config.js")," like this:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"module.exports = {\n  publicRuntimeConfig: {\n    messengerAppId: process.env.MESSENGER_APP_ID,\n  },\n};\n")))}u.isMDXComponent=!0}}]);