"use strict";(self.webpackChunkmachinat_github_io=self.webpackChunkmachinat_github_io||[]).push([[7714],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return u}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=c(t),u=a,v=m["".concat(s,".").concat(u)]||m[u]||d[u]||i;return t?r.createElement(v,o(o({ref:n},p),{},{components:t})):r.createElement(v,o({ref:n},p))}));function u(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var c=2;c<i;c++)o[c]=t[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},8379:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return s},default:function(){return u},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return d}});var r=t(7462),a=t(3366),i=(t(7294),t(3905)),o=["components"],l={title:"Dependency Injection"},s=void 0,c={unversionedId:"dependency-injection",id:"dependency-injection",title:"Dependency Injection",description:"While building an app, we may rely on many services to ship features.",source:"@site/docs/dependency-injection.md",sourceDirName:".",slug:"/dependency-injection",permalink:"/docs/dependency-injection",draft:!1,editUrl:"https://github.com/machinat/machinat/edit/master/website/docs/dependency-injection.md",tags:[],version:"current",frontMatter:{title:"Dependency Injection"},sidebar:"docs",previous:{title:"Components for Chat UI",permalink:"/docs/components-for-cui"},next:{title:"Recognizing Intent",permalink:"/docs/recognizing-intent"}},p={},d=[{value:"Initiate Services",id:"initiate-services",level:2},{value:"Register Modules",id:"register-modules",level:3},{value:"Use Services",id:"use-services",level:2},{value:"Service Container",id:"service-container",level:2},{value:"Container Handler",id:"container-handler",level:3},{value:"Optional Requisition",id:"optional-requisition",level:3},{value:"Standard Services",id:"standard-services",level:3},{value:"Register Services",id:"register-services",level:3},{value:"Providing Services",id:"providing-services",level:2},{value:"Class Provider",id:"class-provider",level:3},{value:"Factory Provider",id:"factory-provider",level:3},{value:"Interface and Binding",id:"interface-and-binding",level:3},{value:"Pure Interface",id:"pure-interface",level:3},{value:"Provide a Value",id:"provide-a-value",level:3},{value:"Multiple Bindings",id:"multiple-bindings",level:3},{value:"Service Lifetime",id:"service-lifetime",level:3}],m={toc:d};function u(e){var n=e.components,t=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"While building an app, we may rely on many services to ship features.\nThe dependent relationship between the services could be complex,\nespecially for a cross-platform app."),(0,i.kt)("p",null,"Machinat has a built-in ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Dependency_injection"},"Dependency Injection"),"\nsystem to help with that.\nActually the whole framework is built upon the DI system."),(0,i.kt)("h2",{id:"initiate-services"},"Initiate Services"),(0,i.kt)("p",null,"When you create and start a Machinat app,\na set of services are initiated to make the app works.\nFor example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import Machinat from '@machinat/core';\nimport Http from '@machinat/http';\nimport Messenger from '@machinat/messenger';\nimport Telegram from '@machinat/telegram';\nimport { FileState } from '@machinat/dev-tools';\nimport FooService from './services/Foo';\nimport BarService from './services/Bar';\n\nconst app = Machinat.createApp({\n  platforms: [\n    Messenger.initModule({/*...*/}),\n    Telegram.initModule({/*...*/}),\n  ],\n  modules: [\n    Http.initModule({/*...*/}),\n    FileState.initModule({/*...*/})\n  ],\n  services: [\n    FooService,\n    BarService,\n  ],\n});\napp.start();\n")),(0,i.kt)("h3",{id:"register-modules"},"Register Modules"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"platforms")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"modules")," options add services for a particular platform or functionality.\nFor example, ",(0,i.kt)("inlineCode",{parentName:"p"},"Messenger.Bot")," service is added by the ",(0,i.kt)("inlineCode",{parentName:"p"},"Messenger")," platform.\nThe bot instance is then created when ",(0,i.kt)("inlineCode",{parentName:"p"},"app.start()"),"."),(0,i.kt)("p",null,"Machinat is made with ",(0,i.kt)("em",{parentName:"p"},"progressive framework")," paradigm.\nYou can start with minimum modules and gradually add more when you need."),(0,i.kt)("p",null,"Check ",(0,i.kt)("a",{parentName:"p",href:"pathname:///api"},"API references")," to see all the available modules."),(0,i.kt)("h2",{id:"use-services"},"Use Services"),(0,i.kt)("p",null,"After the app is started, we can require services and use them like:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import Machinat from '@machinat/core';\nimport Messenger from '@machinat/messenger';\nimport Telegram from '@machinat/telegram';\n\nconst app = Machinat.createApp({/* ... */});\n\napp.start().then(() => {\n  const [messengerBot, telegramBot] = app.useServices([\n    Messenger.Bot,\n    Telegram.Bot,\n  ]);\n  // use the bots ...\n});\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"app.useServices()")," accepts an array of service interfaces and returns the service instances.\nNote that it should only be called after ",(0,i.kt)("inlineCode",{parentName:"p"},"app.start()")," is finished."),(0,i.kt)("h2",{id:"service-container"},"Service Container"),(0,i.kt)("p",null,"We can also require services as the params of a function,\nthat is a ",(0,i.kt)("strong",{parentName:"p"},"Service Container"),".\nThe ",(0,i.kt)("inlineCode",{parentName:"p"},"makeContainer")," decorator annotates a JavaScript function as a container.\nLike:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import { makeContainer } from '@machinat/core';\nimport FooService from './services/Foo';\nimport BarService from './services/Bar';\n\nconst fooBarContainer = makeContainer({\n  deps: [FooService, BarService]\n})((foo, bar) => {\n  // do something with foo & bar ...\n});\n")),(0,i.kt)("p",null,"In the example above, ",(0,i.kt)("inlineCode",{parentName:"p"},"fooBarContainer")," function requires two dependencies ",(0,i.kt)("inlineCode",{parentName:"p"},"FooService")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"BarService"),".\nThe service instances ",(0,i.kt)("inlineCode",{parentName:"p"},"foo")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"bar")," will be injected into the container when it's triggered by the app."),(0,i.kt)("h3",{id:"container-handler"},"Container Handler"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"app.onEvent")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"app.onError")," methods can accept a container of the handler.\nFor example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import { makeContainer, BasicProfiler } from '@machinat/core';\n\napp.onEvent(\n  makeContainer({ deps: [BasicProfiler] })(\n    (profiler) =>\n    async ({ event, reply } ) => {\n      const profile = await profiler.getUserProfile(event.user);\n      await reply(<p>Hello {profile.lastName}!</p>)\n    }\n  )\n);\n")),(0,i.kt)("p",null,"The container receives a ",(0,i.kt)("inlineCode",{parentName:"p"},"BasicProfiler")," instance and returns an ordinary handler function.\nWhen an event is popped, the ",(0,i.kt)("em",{parentName:"p"},"contained")," handler receives event context as usual.\nThen it can use the required ",(0,i.kt)("inlineCode",{parentName:"p"},"profiler")," for replying."),(0,i.kt)("p",null,"Many Machinat APIs support using a container as the callback handler,\nlike ",(0,i.kt)("a",{parentName:"p",href:"pathname:///api/modules/script"},(0,i.kt)("inlineCode",{parentName:"a"},"@machinat/script"))," and ",(0,i.kt)("a",{parentName:"p",href:"pathname:///api/modules/script"},(0,i.kt)("inlineCode",{parentName:"a"},"@machinat/stream")),".\nWe'll introduce them later."),(0,i.kt)("h3",{id:"optional-requisition"},"Optional Requisition"),(0,i.kt)("p",null,"By default it throws an error if an unregistered dependency is required.\nYou can mark a dependency as optional to prevent it."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"makeContainer({\n  deps: [{ require: FooService, optional: true }]\n})((foo) => (ctx) => {\n  // foo would be null if not registered\n  if (foo) {\n    // ...\n  }\n})\n")),(0,i.kt)("h3",{id:"standard-services"},"Standard Services"),(0,i.kt)("p",null,"Machinat defines some standard services which are commonly used while making conversational apps.\nLike recognizing intent, fetching an user\u2019s profile and accessing chat state."),(0,i.kt)("p",null,"Here is an example to put them together:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import {\n  makeContainer,\n  IntentRecognizer,\n  BasicProfiler,\n  StateController,\n} from '@machinat/core';\n\napp.onEvent(\n  makeContainer({\n    deps: [IntentRecognizer, BasicProfiler, StateController],\n  })(\n    (recognizer, profiler, stateController) =>\n    async (context) => {\n      const { bot, event } = context;\n      const { channel, user } = event;\n\n      if (event.type === 'text') {\n        const intent = await recognizer.detectText(channel, event.text);\n\n        if (intent.type === 'hello') {\n          const profile = await profiler.getUserProfile(user);\n          await bot.render(channel, `Hello ${profile?.name || 'there'}!`);\n\n          await stateController\n            .channelState(channel)\n            .update('hello_count', (count = 0) => count + 1);\n        }\n      }\n    }\n  )\n);\n")),(0,i.kt)("p",null,"Here are the list of the standard services:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"pathname:///api/modules/core_base_bot"},(0,i.kt)("inlineCode",{parentName:"a"},"BasicBot")),": Render messages on a platform-agnostic channel."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"pathname:///api/modules/core_base_profiler"},(0,i.kt)("inlineCode",{parentName:"a"},"BasicProfiler")),": Fetch profile of a platform-agnostic user."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"pathname:///api/modules/core_base_statecontroller"},(0,i.kt)("inlineCode",{parentName:"a"},"StateController")),": Save and load channel/user/global state from the storage. We'll introduce it in the ",(0,i.kt)("a",{parentName:"li",href:"/docs/using-states"},"Using State")," doc."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"pathname:///api/modules/core_base_intentrecognizer"},(0,i.kt)("inlineCode",{parentName:"a"},"IntentRecognizer")),": Recognize the intent of a message. We'll introduce it in the ",(0,i.kt)("a",{parentName:"li",href:"/docs/recognizing-intent"},"Recognizing Intent")," doc.")),(0,i.kt)("h3",{id:"register-services"},"Register Services"),(0,i.kt)("p",null,"We can also register individual service in the ",(0,i.kt)("inlineCode",{parentName:"p"},"services")," option:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import MessengerAssetsManager from '@machinat/messenger/asset';\nimport FooService from './foo';\n\nMachinat.createApp({\n  platforms: [/*...*/],\n  modules: [/*...*/],\n  services: [\n    MessengerAssetsManager,\n    FooService,\n  ],\n})\n")),(0,i.kt)("p",null,"The services then can be required via ",(0,i.kt)("inlineCode",{parentName:"p"},"app.useServices()")," or a container."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const [foo, assets] = app.useServices([\n  FooService,\n  MessengerAssetsManager,\n]);\n\nmakeContainer({ deps: [FooService, MessengerAssetsManager] })(\n  (foo, assetsManager) =>\n  (ctx) => {\n    // ...\n  }\n)\n")),(0,i.kt)("h2",{id:"providing-services"},"Providing Services"),(0,i.kt)("h3",{id:"class-provider"},"Class Provider"),(0,i.kt)("p",null,"Despite the standard services, it's easy to make your own ones.\nYou only have to mark a normal class as a service provider.\nFor example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import { makeClassProvider } from '@machinat/core';\nimport BeerService from './Beer';\n\nclass BarService {\n  constructor(beerService) {\n    this.beerService = beerService;\n  }\n\n  serve(drink) {\n    if (drink !== '\ud83c\udf7a') {\n      return null;\n    }\n    return this.beerService.pour();\n  }\n}\n\nexport default makeClassProvider({\n  lifetime: 'singleton',\n  deps: [BeerService],\n})(BarService);\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"makeClassProvider(options)(Klass)")," decorator annotates a class constructor as a service.\nIt takes the following options:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"deps")," - required, the dependencies of the provider."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"lifetime")," - optional, the lifetime of the service, has to be one of ",(0,i.kt)("inlineCode",{parentName:"li"},"'singleton'"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"'scoped'")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"'transient'"),". Default to ",(0,i.kt)("inlineCode",{parentName:"li"},"'singleton'"),". Check the ",(0,i.kt)("a",{parentName:"li",href:"#service-lifetime"},"service lifetime")," section."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"name")," - optional, the name of the provider, default to the constructor name."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"factory")," - optional, the factory function to create the provider instance, default to ",(0,i.kt)("inlineCode",{parentName:"li"},"(...deps) => new Klass(...deps)"),".")),(0,i.kt)("p",null,"Now we can register the service and use it like:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const app = Machinat.createApp({\n  services: [BeerService, BarService],\n});\n\napp.start().then(() => {\n  const [bar] = app.useServices([BarService]);\n  return bar.serve('\ud83c\udf7a');\n});\n")),(0,i.kt)("h3",{id:"factory-provider"},"Factory Provider"),(0,i.kt)("p",null,"We can make a provider with another style: a factory function.\nFor example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import { makeFactoryProvider } from '@machinat/core';\nimport BeerService from './Beer';\n\nconst useBar = (beerService) => (drink) =>\n  drink === '\ud83c\udf7a' ? beerService.pour() : null;\n\nexport default makeFactoryProvider({\n  lifetime: 'transient',\n  deps: [BeerService],\n})(BarService);\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"makeFactoryProvider(options)(factoryFn)")," decorator annotates a factory function as a service.\nThe factory function receives the dependencies like a container and returns the service instance (which can be a function).\nIt takes the following options:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"deps")," - required, the dependencies of the provider."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"lifetime")," - optional, the lifetime of the service, has to be one of ",(0,i.kt)("inlineCode",{parentName:"li"},"'singleton'"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"'scoped'")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"'transient'"),". Default to ",(0,i.kt)("inlineCode",{parentName:"li"},"'transient'"),". Check the ",(0,i.kt)("a",{parentName:"li",href:"#service-lifetime"},"service lifetime")," section."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"name")," - optional, the name of the provider, default to the factory function name.")),(0,i.kt)("p",null,"Then we can register and use the service like:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const app = Machinat.createApp({\n  services: [BeerService, useBar],\n});\n\napp.start().then(() => {\n  const [getDrink] = app.useServices([useBar]);\n  return getDrink('\ud83c\udf7a');\n});\n")),(0,i.kt)("h3",{id:"interface-and-binding"},"Interface and Binding"),(0,i.kt)("p",null,"The provider is also a ",(0,i.kt)("em",{parentName:"p"},"service interface")," so we can require it as a dependency.\nWhen we register the provider, it provides the service instance for ",(0,i.kt)("em",{parentName:"p"},"itself"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"Machinat.createApp({\n  services: [MyService],\n});\n// is equivalent to\nMachinat.crrateApp({\n  services: [\n    { provide: MyService, withProvider: MyService },\n  ],\n});\n")),(0,i.kt)("p",null,"The binding between a ",(0,i.kt)("em",{parentName:"p"},"service interface")," and a ",(0,i.kt)("em",{parentName:"p"},"service provider")," is created when we register a service.\nThe interface can be bound to another provider,\nso we can swap the service implementation."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const app = Machinat.crrateApp({\n  services: [\n    { provide: MyService, withProvider: AnotherService },\n  ],\n});\n\nconst [myService] = app.useServices([MyService]);\nconsole.log(myService instanceof AnotherService); // true\n")),(0,i.kt)("h3",{id:"pure-interface"},"Pure Interface"),(0,i.kt)("p",null,"Besides the provider itself,\nwe can create an interface with ",(0,i.kt)("inlineCode",{parentName:"p"},"makeInterface")," for binding different implementations.\nFor example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import { makeInterface } from '@machinat/core';\nimport MyServiceImpl from './MyServiceImpl';\n\nconst MyService = makeInterface({ name: 'MyService' });\n\nMachinat.crrateApp({\n  services: [\n    { provide: MyService, withProvider: MyServiceImpl },\n  ],\n});\n\nconst [myService] = app.useServices([MyService]);\nconsole.log(myService instanceof MyServiceImpl); // true\n")),(0,i.kt)("h3",{id:"provide-a-value"},"Provide a Value"),(0,i.kt)("p",null,"An interface can be bound with the value directly instead of a provider.\nThis is especially useful to pass configurations in a decoupled way:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const BotName = makeInterface({ name: 'BotName' })\n\nMachinat.crrateApp({\n  services: [\n    { provide: BotName, withValue: 'David' },\n  ],\n});\n\nconst [botName] = app.useServices([BotName]);\nconsole.log(botName); // David\n")),(0,i.kt)("h3",{id:"multiple-bindings"},"Multiple Bindings"),(0,i.kt)("p",null,"An interface can also accept multiple implementations with ",(0,i.kt)("inlineCode",{parentName:"p"},"multi")," option.\nWhen we require a ",(0,i.kt)("inlineCode",{parentName:"p"},"multi")," interface, a list of services is resolved.\nLike this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import { makeInterface } from '@machinat/core';\n\nconst MyFavoriteFood = makeInterface({ name: 'MyService', multi: true })\n\nMachinat.crrateApp({\n  services: [\n    { provide: MyFavoriteFood, withValue: '\ud83c\udf2e' },\n    { provide: MyFavoriteFood, withValue: '\ud83e\udd59' },\n  ],\n});\n\nconst [dinner] = app.useServices([MyFavoriteFood]);\nconsole.log(dinner); // ['\ud83c\udf2e', '\ud83e\udd59']\n")),(0,i.kt)("h3",{id:"service-lifetime"},"Service Lifetime"),(0,i.kt)("p",null,"Service lifetime defines how the service instances are created in the app.\nThere are three types of lifetime:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"'transient'")," - every time the service is required."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"'scoped'")," - only once per service scope."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"'singleton'")," - only once in the app when ",(0,i.kt)("inlineCode",{parentName:"li"},"app.start()"),".")),(0,i.kt)("p",null,"A service scope is an abstract period for handling an event or dispatching the messages.\nA service with ",(0,i.kt)("inlineCode",{parentName:"p"},"'scoped'")," lifetime is created lazily in a scope,\nand the instance will be cached for later requisition."))}u.isMDXComponent=!0}}]);